1::(1, class, class)
2::(1, identifier, X)
3::(1, keyword, extends)
4::(1, identifier, Yes)
5::(1, keyword, implements)
6::(1, identifier, X)
7::(1, comma, ,)
8::(1, identifier, Farooq)
9::(1, {, {)
10::(2, mutable-constant, var)
11::(2, identifier, farooq)
12::(2, comma, ,)
13::(2, identifier, noor)
14::(2, comma, ,)
15::(2, identifier, abbas)
16::(2, colon, :)
17::(2, data-type, int)
18::(4, access-modifier, public)
19::(4, static, static)
20::(4, func, func)
21::(4, identifier, Q)
22::(4, (, ()
23::(4, identifier, x)
24::(4, colon, :)
25::(4, data-type, int)
26::(4, ), ))
27::(4, {, {)
28::(5, mutable-constant, var)
29::(5, identifier, i)
30::(5, colon, :)
31::(5, data-type, int)
32::(5, UnaryOperator, =)
33::(5, integer, 10)
34::(6, while, while)
35::(6, (, ()
36::(6, identifier, i)
37::(6, RelationalOperator, ==)
38::(6, identifier, a)
39::(6, ), ))
40::(6, {, {)
41::(7, }, })
42::(9, }, })
43::(11, init, init)
44::(11, (, ()
45::(11, identifier, x)
46::(11, colon, :)
47::(11, data-type, int)
48::(11, ), ))
49::(11, {, {)
50::(13, }, })
51::(15, deinit, deinit)
52::(15, {, {)
53::(17, }, })
54::(18, }, })
55::(20, struct, struct)
56::(20, identifier, X)
57::(20, keyword, extends)
58::(20, identifier, Yes)
59::(20, keyword, implements)
60::(20, identifier, X)
61::(20, comma, ,)
62::(20, identifier, Farooq)
63::(20, {, {)
64::(21, mutable-constant, var)
65::(21, identifier, farooq)
66::(21, comma, ,)
67::(21, identifier, noor)
68::(21, comma, ,)
69::(21, identifier, abbas)
70::(21, colon, :)
71::(21, data-type, int)
72::(23, access-modifier, public)
73::(23, static, static)
74::(23, func, func)
75::(23, identifier, Q)
76::(23, (, ()
77::(23, identifier, x)
78::(23, colon, :)
79::(23, data-type, int)
80::(23, ), ))
81::(23, {, {)
82::(24, mutable-constant, var)
83::(24, identifier, i)
84::(24, colon, :)
85::(24, data-type, int)
86::(24, UnaryOperator, =)
87::(24, integer, 10)
88::(25, }, })
89::(26, init, init)
90::(26, (, ()
91::(26, identifier, x)
92::(26, colon, :)
93::(26, data-type, int)
94::(26, ), ))
95::(26, {, {)
96::(28, }, })
97::(30, deinit, deinit)
98::(30, {, {)
99::(32, }, })
100::(33, }, })
101::(35, enum, enum)
102::(35, identifier, A)
103::(35, colon, :)
104::(35, data-type, int)
105::(35, {, {)
106::(36, keyword, case)
107::(36, identifier, X)
108::(37, keyword, case)
109::(37, identifier, Y)
110::(38, }, })
111::(40, interface, protocol)
112::(40, identifier, A)
113::(40, keyword, implements)
114::(40, identifier, X)
115::(40, comma, ,)
116::(40, identifier, Y)
117::(40, comma, ,)
118::(40, identifier, Z)
119::(40, {, {)
120::(42, }, })
121::(44, func, func)
122::(44, identifier, work1)
123::(44, (, ()
124::(44, ), ))
125::(44, {, {)
126::(45, mutable-constant, var)
127::(45, identifier, i)
128::(45, colon, :)
129::(45, data-type, int)
130::(45, UnaryOperator, =)
131::(45, identifier, a)
132::(46, mutable-constant, var)
133::(46, identifier, i)
134::(46, colon, :)
135::(46, data-type, int)
136::(46, UnaryOperator, =)
137::(46, string, "str")
138::(47, mutable-constant, var)
139::(47, identifier, i)
140::(47, colon, :)
141::(47, data-type, int)
142::(47, UnaryOperator, =)
143::(48, }, })
144::(50, func, func)
145::(50, identifier, work)
146::(50, (, ()
147::(50, identifier, x)
148::(50, colon, :)
149::(50, data-type, int)
150::(50, ), ))
151::(50, {, {)
152::(51, mutable-constant, var)
153::(51, identifier, i)
154::(51, colon, :)
155::(51, data-type, int)
156::(51, UnaryOperator, =)
157::(51, identifier, a)
158::(52, mutable-constant, var)
159::(52, identifier, i)
160::(52, colon, :)
161::(52, data-type, int)
162::(52, UnaryOperator, =)
163::(52, string, "str")
164::(53, mutable-constant, var)
165::(53, identifier, i)
166::(53, colon, :)
167::(53, data-type, int)
168::(53, UnaryOperator, =)
169::(54, }, })
170::(56, Main, Main)
171::(56, (, ()
172::(56, ), ))
173::(56, {, {)
174::(57, mutable-constant, var)
175::(57, identifier, a)
176::(57, colon, :)
177::(57, data-type, int)
178::(57, UnaryOperator, =)
179::(57, integer, 10)
180::(58, immutable-constant, let)
181::(58, identifier, arr)
182::(58, colon, :)
183::(58, [, [)
184::(58, data-type, int)
185::(58, ], ])
186::(58, semi-colon, ;)
187::(59, immutable-constant, let)
188::(59, identifier, arr)
189::(59, colon, :)
190::(59, [, [)
191::(59, [, [)
192::(59, data-type, int)
193::(59, ], ])
194::(59, ], ])
195::(59, semi-colon, ;)
196::(60, while, while)
197::(60, (, ()
198::(60, identifier, b)
199::(60, dot, .)
200::(60, identifier, a)
201::(60, dot, .)
202::(60, identifier, fn)
203::(60, (, ()
204::(60, ), ))
205::(60, RelationalOperator, ==)
206::(60, integer, 10)
207::(60, ), ))
208::(60, {, {)
209::(62, if, if)
210::(62, (, ()
211::(62, identifier, b)
212::(62, RelationalOperator, <)
213::(62, integer, 5)
214::(62, ), ))
215::(62, {, {)
216::(63, immutable-constant, let)
217::(63, identifier, arr)
218::(63, colon, :)
219::(63, [, [)
220::(63, data-type, int)
221::(63, ], ])
222::(63, semi-colon, ;)
223::(64, }, })
224::(65, else, else)
225::(65, if, if)
226::(65, (, ()
227::(65, identifier, a)
228::(65, RelationalOperator, >)
229::(65, integer, 4)
230::(65, ), ))
231::(65, {, {)
232::(66, identifier, a)
233::(66, inc-dec, ++)
234::(66, inc-dec, ++)
235::(67, immutable-constant, let)
236::(67, identifier, arr)
237::(67, colon, :)
238::(67, data-type, int)
239::(67, UnaryOperator, =)
240::(67, identifier, work)
241::(67, (, ()
242::(67, identifier, x)
243::(67, colon, :)
244::(67, data-type, int)
245::(67, comma, ,)
246::(67, integer, 5)
247::(67, colon, :)
248::(67, data-type, int)
249::(67, ), ))
250::(67, semi-colon, ;)
251::(68, }, })
252::(69, continue, continue)
253::(69, semi-colon, ;)
254::(70, }, })
255::(71, if, if)
256::(71, (, ()
257::(71, identifier, b)
258::(71, RelationalOperator, <)
259::(71, integer, 5)
260::(71, ), ))
261::(71, {, {)
262::(72, while, while)
263::(72, (, ()
264::(72, identifier, b)
265::(72, RelationalOperator, ==)
266::(72, integer, 10)
267::(72, ), ))
268::(72, {, {)
269::(73, if, if)
270::(73, (, ()
271::(73, identifier, b)
272::(73, RelationalOperator, <)
273::(73, integer, 5)
274::(73, ), ))
275::(73, {, {)
276::(74, immutable-constant, let)
277::(74, identifier, arr)
278::(74, colon, :)
279::(74, [, [)
280::(74, data-type, int)
281::(74, ], ])
282::(74, semi-colon, ;)
283::(75, }, })
284::(76, else, else)
285::(76, if, if)
286::(76, (, ()
287::(76, identifier, a)
288::(76, RelationalOperator, >)
289::(76, integer, 4)
290::(76, ), ))
291::(76, {, {)
292::(78, }, })
293::(79, continue, continue)
294::(79, semi-colon, ;)
295::(80, }, })
296::(81, }, })
297::(82, else, else)
298::(82, if, if)
299::(82, (, ()
300::(82, identifier, a)
301::(82, RelationalOperator, >)
302::(82, integer, 4)
303::(82, ), ))
304::(82, {, {)
305::(84, }, })
306::(85, else, else)
307::(85, {, {)
308::(87, }, })
309::(89, identifier, try)
310::(89, {, {)
311::(90, if, if)
312::(90, (, ()
313::(90, identifier, b)
314::(90, RelationalOperator, <)
315::(90, integer, 5)
316::(90, ), ))
317::(90, {, {)
318::(91, immutable-constant, let)
319::(91, identifier, arr)
320::(91, colon, :)
321::(91, [, [)
322::(91, data-type, int)
323::(91, ], ])
324::(91, semi-colon, ;)
325::(92, }, })
326::(93, }, })
327::(94, identifier, catch)
328::(94, (, ()
329::(94, identifier, e)
330::(94, ), ))
331::(94, {, {)
332::(96, }, })
333::(98, }, })
334::(100, class, class)
335::(100, identifier, X)
336::(100, keyword, extends)
337::(100, identifier, Yes)
338::(100, keyword, implements)
339::(100, identifier, X)
340::(100, comma, ,)
341::(100, identifier, Farooq)
342::(100, {, {)
343::(101, mutable-constant, var)
344::(101, identifier, farooq)
345::(101, comma, ,)
346::(101, identifier, noor)
347::(101, comma, ,)
348::(101, identifier, abbas)
349::(101, colon, :)
350::(101, data-type, int)
351::(103, access-modifier, public)
352::(103, static, static)
353::(103, func, func)
354::(103, identifier, Q)
355::(103, (, ()
356::(103, identifier, x)
357::(103, colon, :)
358::(103, data-type, int)
359::(103, ), ))
360::(103, {, {)
361::(104, mutable-constant, var)
362::(104, identifier, i)
363::(104, colon, :)
364::(104, data-type, int)
365::(104, UnaryOperator, =)
366::(104, integer, 10)
367::(105, while, while)
368::(105, (, ()
369::(105, identifier, i)
370::(105, RelationalOperator, ==)
371::(105, identifier, a)
372::(105, ), ))
373::(105, {, {)
374::(106, }, })
375::(108, }, })
376::(110, init, init)
377::(110, (, ()
378::(110, identifier, x)
379::(110, colon, :)
380::(110, data-type, int)
381::(110, ), ))
382::(110, {, {)
383::(112, }, })
384::(114, deinit, deinit)
385::(114, {, {)
386::(116, }, })
387::(117, }, })
388::(121, end-mark, $)
