1::(1, func, func)
2::(1, identifier, gst)
3::(1, (, ()
4::(1, ), ))
5::(1, {, {)
6::(2, mutable-constant, var)
7::(2, identifier, a)
8::(2, colon, :)
9::(2, data-type, int)
10::(2, UnaryOperator, =)
11::(2, int, 9)
12::(2, PlusMinus, +)
13::(2, int, 6)
14::(2, MultipyDivide, *)
15::(2, int, 3)
16::(2, semi-colon, ;)
17::(3, mutable-constant, var)
18::(3, identifier, y)
19::(3, colon, :)
20::(3, data-type, int)
21::(3, UnaryOperator, =)
22::(3, int, 12)
23::(3, semi-colon, ;)
24::(4, mutable-constant, var)
25::(4, identifier, x)
26::(4, colon, :)
27::(4, data-type, int)
28::(4, UnaryOperator, =)
29::(4, identifier, a)
30::(4, PlusMinus, +)
31::(4, identifier, y)
32::(4, semi-colon, ;)
33::(5, identifier, x)
34::(5, UnaryOperator, =)
35::(5, int, 5)
36::(5, semi-colon, ;)
37::(6, }, })
38::(7, class, class)
39::(7, identifier, Z)
40::(7, {, {)
41::(9, }, })
42::(11, class, class)
43::(11, identifier, Yes)
44::(11, keyword, extends)
45::(11, identifier, Z)
46::(11, {, {)
47::(13, }, })
48::(15, Main, Main)
49::(15, (, ()
50::(15, ), ))
51::(15, {, {)
52::(16, mutable-constant, var)
53::(16, identifier, obj)
54::(16, colon, :)
55::(16, identifier, Z)
56::(16, UnaryOperator, =)
57::(16, identifier, Yes)
58::(16, dot, .)
59::(16, init, init)
60::(16, (, ()
61::(16, ), ))
62::(16, semi-colon, ;)
63::(17, }, })
64::(18, interface, protocol)
65::(18, identifier, K)
66::(18, {, {)
67::(20, }, })
68::(22, struct, struct)
69::(22, identifier, W)
70::(22, keyword, implements)
71::(22, identifier, K)
72::(22, {, {)
73::(23, mutable-constant, var)
74::(23, identifier, farooq)
75::(23, comma, ,)
76::(23, identifier, noor)
77::(23, comma, ,)
78::(23, identifier, abbas)
79::(23, colon, :)
80::(23, data-type, int)
81::(24, access-modifier, public)
82::(24, static, static)
83::(24, func, func)
84::(24, identifier, Q)
85::(24, (, ()
86::(24, identifier, x)
87::(24, colon, :)
88::(24, data-type, int)
89::(24, ), ))
90::(24, {, {)
91::(25, mutable-constant, var)
92::(25, identifier, i)
93::(25, colon, :)
94::(25, data-type, int)
95::(25, UnaryOperator, =)
96::(25, int, 10)
97::(25, semi-colon, ;)
98::(26, }, })
99::(27, init, init)
100::(27, (, ()
101::(27, identifier, x)
102::(27, colon, :)
103::(27, data-type, int)
104::(27, ), ))
105::(27, {, {)
106::(29, }, })
107::(31, deinit, deinit)
108::(31, {, {)
109::(33, }, })
110::(34, }, })
111::(36, class, class)
112::(36, identifier, A)
113::(36, {, {)
114::(37, mutable-constant, var)
115::(37, identifier, farooq)
116::(37, comma, ,)
117::(37, identifier, noor)
118::(37, comma, ,)
119::(37, identifier, abbas)
120::(37, colon, :)
121::(37, data-type, int)
122::(37, UnaryOperator, =)
123::(37, int, 10)
124::(38, mutable-constant, var)
125::(38, identifier, r)
126::(38, comma, ,)
127::(38, identifier, t)
128::(38, comma, ,)
129::(38, identifier, d)
130::(38, colon, :)
131::(38, data-type, int)
132::(39, mutable-constant, var)
133::(39, identifier, w)
134::(39, comma, ,)
135::(39, identifier, e)
136::(39, comma, ,)
137::(39, identifier, m)
138::(39, colon, :)
139::(39, data-type, float)
140::(41, func, func)
141::(41, identifier, mst)
142::(41, (, ()
143::(41, ), ))
144::(41, {, {)
145::(42, mutable-constant, var)
146::(42, identifier, a)
147::(42, comma, ,)
148::(42, identifier, n)
149::(42, colon, :)
150::(42, data-type, int)
151::(42, UnaryOperator, =)
152::(42, int, 6)
153::(42, semi-colon, ;)
154::(43, mutable-constant, var)
155::(43, identifier, q)
156::(43, colon, :)
157::(43, data-type, int)
158::(43, UnaryOperator, =)
159::(43, int, 6)
160::(43, semi-colon, ;)
161::(45, }, })
162::(46, }, })
163::(50, interface, protocol)
164::(50, identifier, J)
165::(50, {, {)
166::(52, }, })
167::(57, access-modifier, public)
168::(57, static, static)
169::(57, class, class)
170::(57, identifier, L)
171::(57, keyword, extends)
172::(57, identifier, Yes)
173::(57, keyword, implements)
174::(57, identifier, J)
175::(57, comma, ,)
176::(57, identifier, K)
177::(57, {, {)
178::(58, mutable-constant, var)
179::(58, identifier, farooq)
180::(58, comma, ,)
181::(58, identifier, noor)
182::(58, comma, ,)
183::(58, identifier, abbas)
184::(58, colon, :)
185::(58, data-type, int)
186::(60, access-modifier, public)
187::(60, static, static)
188::(60, func, func)
189::(60, identifier, Q)
190::(60, (, ()
191::(60, identifier, x)
192::(60, colon, :)
193::(60, data-type, int)
194::(60, comma, ,)
195::(60, identifier, y)
196::(60, colon, :)
197::(60, data-type, float)
198::(60, ), ))
199::(60, ret-type, ->)
200::(60, data-type, float)
201::(60, {, {)
202::(61, mutable-constant, var)
203::(61, identifier, i)
204::(61, colon, :)
205::(61, data-type, int)
206::(61, UnaryOperator, =)
207::(61, int, 10)
208::(61, semi-colon, ;)
209::(62, mutable-constant, var)
210::(62, identifier, a)
211::(62, colon, :)
212::(62, data-type, int)
213::(62, UnaryOperator, =)
214::(62, int, 10)
215::(62, semi-colon, ;)
216::(63, while, while)
217::(63, (, ()
218::(63, identifier, i)
219::(63, RelationalOperator, ==)
220::(63, identifier, a)
221::(63, ), ))
222::(63, {, {)
223::(64, }, })
224::(66, }, })
225::(68, init, init)
226::(68, (, ()
227::(68, identifier, x)
228::(68, colon, :)
229::(68, data-type, int)
230::(68, ), ))
231::(68, {, {)
232::(70, }, })
233::(72, deinit, deinit)
234::(72, {, {)
235::(74, }, })
236::(75, }, })
237::(100, func, func)
238::(100, identifier, work1)
239::(100, (, ()
240::(100, ), ))
241::(100, {, {)
242::(101, mutable-constant, var)
243::(101, identifier, r)
244::(101, colon, :)
245::(101, data-type, int)
246::(101, UnaryOperator, =)
247::(101, int, 0)
248::(101, semi-colon, ;)
249::(102, mutable-constant, var)
250::(102, identifier, t)
251::(102, colon, :)
252::(102, data-type, int)
253::(102, semi-colon, ;)
254::(103, }, })
255::(105, func, func)
256::(105, identifier, work)
257::(105, (, ()
258::(105, identifier, x)
259::(105, colon, :)
260::(105, data-type, int)
261::(105, ), ))
262::(105, {, {)
263::(107, mutable-constant, var)
264::(107, identifier, i)
265::(107, colon, :)
266::(107, data-type, int)
267::(107, UnaryOperator, =)
268::(107, int, 0)
269::(107, semi-colon, ;)
270::(108, identifier, this)
271::(108, dot, .)
272::(108, identifier, id)
273::(108, dot, .)
274::(108, identifier, id)
275::(109, }, })
276::(111, Main, Main)
277::(111, (, ()
278::(111, ), ))
279::(111, {, {)
280::(112, immutable-constant, let)
281::(112, identifier, arr)
282::(112, colon, :)
283::(112, [, [)
284::(112, [, [)
285::(112, data-type, int)
286::(112, ], ])
287::(112, ], ])
288::(112, semi-colon, ;)
289::(113, identifier, try)
290::(113, {, {)
291::(114, mutable-constant, var)
292::(114, identifier, a)
293::(114, colon, :)
294::(114, data-type, int)
295::(114, UnaryOperator, =)
296::(114, int, 4)
297::(114, semi-colon, ;)
298::(115, if, if)
299::(115, (, ()
300::(115, identifier, a)
301::(115, RelationalOperator, ==)
302::(115, int, 5)
303::(115, ), ))
304::(115, {, {)
305::(116, immutable-constant, let)
306::(116, identifier, arr)
307::(116, colon, :)
308::(116, [, [)
309::(116, data-type, int)
310::(116, ], ])
311::(116, semi-colon, ;)
312::(117, }, })
313::(118, }, })
314::(119, identifier, catch)
315::(119, (, ()
316::(119, identifier, e)
317::(119, ), ))
318::(119, {, {)
319::(121, }, })
320::(123, }, })
321::(127, end-mark, $)
