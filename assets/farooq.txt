1::(1, interface, protocol)
2::(1, identifier, J)
3::(1, {, {)
4::(3, }, })
5::(4, interface, protocol)
6::(4, identifier, K)
7::(4, {, {)
8::(6, }, })
9::(8, class, class)
10::(8, identifier, Yes)
11::(8, {, {)
12::(10, }, })
13::(12, access-modifier, public)
14::(12, static, static)
15::(12, class, class)
16::(12, identifier, X)
17::(12, keyword, extends)
18::(12, identifier, Yes)
19::(12, keyword, implements)
20::(12, identifier, J)
21::(12, comma, ,)
22::(12, identifier, K)
23::(12, {, {)
24::(13, mutable-constant, var)
25::(13, identifier, farooq)
26::(13, comma, ,)
27::(13, identifier, noor)
28::(13, comma, ,)
29::(13, identifier, abbas)
30::(13, colon, :)
31::(13, data-type, int)
32::(15, access-modifier, public)
33::(15, static, static)
34::(15, func, func)
35::(15, identifier, Q)
36::(15, (, ()
37::(15, identifier, x)
38::(15, colon, :)
39::(15, data-type, int)
40::(15, comma, ,)
41::(15, identifier, y)
42::(15, colon, :)
43::(15, data-type, float)
44::(15, ), ))
45::(15, ret-type, ->)
46::(15, data-type, float)
47::(15, {, {)
48::(16, mutable-constant, var)
49::(16, identifier, i)
50::(16, colon, :)
51::(16, data-type, int)
52::(16, UnaryOperator, =)
53::(16, int, 10)
54::(16, semi-colon, ;)
55::(17, while, while)
56::(17, (, ()
57::(17, identifier, i)
58::(17, RelationalOperator, ==)
59::(17, identifier, a)
60::(17, ), ))
61::(17, {, {)
62::(18, }, })
63::(20, }, })
64::(22, init, init)
65::(22, (, ()
66::(22, identifier, x)
67::(22, colon, :)
68::(22, data-type, int)
69::(22, ), ))
70::(22, {, {)
71::(24, }, })
72::(26, deinit, deinit)
73::(26, {, {)
74::(28, }, })
75::(29, }, })
76::(31, struct, struct)
77::(31, identifier, W)
78::(31, keyword, extends)
79::(31, identifier, Yes)
80::(31, keyword, implements)
81::(31, identifier, J)
82::(31, comma, ,)
83::(31, identifier, K)
84::(31, {, {)
85::(32, mutable-constant, var)
86::(32, identifier, farooq)
87::(32, comma, ,)
88::(32, identifier, noor)
89::(32, comma, ,)
90::(32, identifier, abbas)
91::(32, colon, :)
92::(32, data-type, int)
93::(33, access-modifier, public)
94::(33, static, static)
95::(33, func, func)
96::(33, identifier, Q)
97::(33, (, ()
98::(33, identifier, x)
99::(33, colon, :)
100::(33, data-type, int)
101::(33, ), ))
102::(33, {, {)
103::(34, mutable-constant, var)
104::(34, identifier, i)
105::(34, colon, :)
106::(34, data-type, int)
107::(34, UnaryOperator, =)
108::(34, int, 10)
109::(34, semi-colon, ;)
110::(35, }, })
111::(36, init, init)
112::(36, (, ()
113::(36, identifier, x)
114::(36, colon, :)
115::(36, data-type, int)
116::(36, ), ))
117::(36, {, {)
118::(38, }, })
119::(40, deinit, deinit)
120::(40, {, {)
121::(42, }, })
122::(43, }, })
123::(54, func, func)
124::(54, identifier, work1)
125::(54, (, ()
126::(54, ), ))
127::(54, {, {)
128::(55, mutable-constant, var)
129::(55, identifier, r)
130::(55, colon, :)
131::(55, data-type, int)
132::(55, UnaryOperator, =)
133::(55, int, 0)
134::(55, semi-colon, ;)
135::(56, mutable-constant, var)
136::(56, identifier, t)
137::(56, colon, :)
138::(56, data-type, int)
139::(56, semi-colon, ;)
140::(57, }, })
141::(59, func, func)
142::(59, identifier, work)
143::(59, (, ()
144::(59, identifier, x)
145::(59, colon, :)
146::(59, data-type, int)
147::(59, ), ))
148::(59, {, {)
149::(61, mutable-constant, var)
150::(61, identifier, i)
151::(61, colon, :)
152::(61, data-type, int)
153::(61, UnaryOperator, =)
154::(61, int, 0)
155::(61, semi-colon, ;)
156::(62, identifier, this)
157::(62, dot, .)
158::(62, identifier, id)
159::(62, dot, .)
160::(62, identifier, id)
161::(63, }, })
162::(65, Main, Main)
163::(65, (, ()
164::(65, ), ))
165::(65, {, {)
166::(66, mutable-constant, var)
167::(66, identifier, a)
168::(66, colon, :)
169::(66, data-type, int)
170::(66, UnaryOperator, =)
171::(66, int, 4)
172::(66, semi-colon, ;)
173::(67, immutable-constant, let)
174::(67, identifier, arr)
175::(67, colon, :)
176::(67, [, [)
177::(67, data-type, int)
178::(67, ], ])
179::(67, semi-colon, ;)
180::(68, immutable-constant, let)
181::(68, identifier, arr)
182::(68, colon, :)
183::(68, [, [)
184::(68, [, [)
185::(68, data-type, int)
186::(68, ], ])
187::(68, ], ])
188::(68, semi-colon, ;)
189::(69, identifier, try)
190::(69, {, {)
191::(70, if, if)
192::(70, (, ()
193::(70, identifier, b)
194::(70, RelationalOperator, <)
195::(70, int, 5)
196::(70, ), ))
197::(70, {, {)
198::(71, immutable-constant, let)
199::(71, identifier, arr)
200::(71, colon, :)
201::(71, [, [)
202::(71, data-type, int)
203::(71, ], ])
204::(71, semi-colon, ;)
205::(72, }, })
206::(73, }, })
207::(74, identifier, catch)
208::(74, (, ()
209::(74, identifier, e)
210::(74, ), ))
211::(74, {, {)
212::(76, }, })
213::(78, }, })
214::(82, end-mark, $)
