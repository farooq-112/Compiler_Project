1::(1, class, class)
2::(1, identifier, X)
3::(1, keyword, extends)
4::(1, identifier, Yes)
5::(1, keyword, implements)
6::(1, identifier, X)
7::(1, comma, ,)
8::(1, identifier, Farooq)
9::(1, {, {)
10::(2, mutable-constant, var)
11::(2, identifier, farooq)
12::(2, comma, ,)
13::(2, identifier, noor)
14::(2, comma, ,)
15::(2, identifier, abbas)
16::(2, colon, :)
17::(2, data-type, int)
18::(4, access-modifier, public)
19::(4, static, static)
20::(4, func, func)
21::(4, identifier, Q)
22::(4, (, ()
23::(4, identifier, x)
24::(4, colon, :)
25::(4, data-type, int)
26::(4, ), ))
27::(4, {, {)
28::(5, mutable-constant, var)
29::(5, identifier, i)
30::(5, colon, :)
31::(5, data-type, int)
32::(5, UnaryOperator, =)
33::(5, integer, 10)
34::(6, while, while)
35::(6, (, ()
36::(6, identifier, i)
37::(6, RelationalOperator, ==)
38::(6, identifier, a)
39::(6, ), ))
40::(6, {, {)
41::(7, }, })
42::(9, }, })
43::(11, init, init)
44::(11, (, ()
45::(11, identifier, x)
46::(11, colon, :)
47::(11, data-type, int)
48::(11, ), ))
49::(11, {, {)
50::(13, }, })
51::(15, deinit, deinit)
52::(15, {, {)
53::(17, }, })
54::(18, }, })
55::(20, struct, struct)
56::(20, identifier, X)
57::(20, keyword, extends)
58::(20, identifier, Yes)
59::(20, keyword, implements)
60::(20, identifier, X)
61::(20, comma, ,)
62::(20, identifier, Farooq)
63::(20, {, {)
64::(21, mutable-constant, var)
65::(21, identifier, farooq)
66::(21, comma, ,)
67::(21, identifier, noor)
68::(21, comma, ,)
69::(21, identifier, abbas)
70::(21, colon, :)
71::(21, data-type, int)
72::(23, access-modifier, public)
73::(23, static, static)
74::(23, func, func)
75::(23, identifier, Q)
76::(23, (, ()
77::(23, identifier, x)
78::(23, colon, :)
79::(23, data-type, int)
80::(23, ), ))
81::(23, {, {)
82::(24, mutable-constant, var)
83::(24, identifier, i)
84::(24, colon, :)
85::(24, data-type, int)
86::(24, UnaryOperator, =)
87::(24, integer, 10)
88::(25, }, })
89::(26, init, init)
90::(26, (, ()
91::(26, identifier, x)
92::(26, colon, :)
93::(26, data-type, int)
94::(26, ), ))
95::(26, {, {)
96::(28, }, })
97::(30, deinit, deinit)
98::(30, {, {)
99::(32, }, })
100::(33, }, })
101::(35, enum, enum)
102::(35, identifier, A)
103::(35, colon, :)
104::(35, data-type, int)
105::(35, {, {)
106::(36, keyword, case)
107::(36, identifier, X)
108::(37, keyword, case)
109::(37, identifier, Y)
110::(38, }, })
111::(40, interface, protocol)
112::(40, identifier, A)
113::(40, keyword, implements)
114::(40, identifier, X)
115::(40, comma, ,)
116::(40, identifier, Y)
117::(40, comma, ,)
118::(40, identifier, Z)
119::(40, {, {)
120::(42, }, })
121::(44, func, func)
122::(44, identifier, work)
123::(44, (, ()
124::(44, identifier, x)
125::(44, colon, :)
126::(44, data-type, int)
127::(44, ), ))
128::(44, {, {)
129::(45, mutable-constant, var)
130::(45, identifier, i)
131::(45, colon, :)
132::(45, data-type, int)
133::(45, UnaryOperator, =)
134::(45, identifier, a)
135::(46, mutable-constant, var)
136::(46, identifier, i)
137::(46, colon, :)
138::(46, data-type, int)
139::(46, UnaryOperator, =)
140::(46, string, "str")
141::(47, mutable-constant, var)
142::(47, identifier, i)
143::(47, colon, :)
144::(47, data-type, int)
145::(47, UnaryOperator, =)
146::(48, }, })
147::(50, Main, Main)
148::(50, (, ()
149::(50, ), ))
150::(50, {, {)
151::(51, mutable-constant, var)
152::(51, identifier, a)
153::(51, colon, :)
154::(51, data-type, int)
155::(51, UnaryOperator, =)
156::(51, integer, 10)
157::(52, immutable-constant, let)
158::(52, identifier, arr)
159::(52, colon, :)
160::(52, [, [)
161::(52, data-type, int)
162::(52, ], ])
163::(52, semi-colon, ;)
164::(53, immutable-constant, let)
165::(53, identifier, arr)
166::(53, colon, :)
167::(53, [, [)
168::(53, [, [)
169::(53, data-type, int)
170::(53, ], ])
171::(53, ], ])
172::(53, semi-colon, ;)
173::(54, while, while)
174::(54, (, ()
175::(54, identifier, b)
176::(54, RelationalOperator, ==)
177::(54, integer, 10)
178::(54, ), ))
179::(54, {, {)
180::(55, if, if)
181::(55, (, ()
182::(55, identifier, b)
183::(55, RelationalOperator, <)
184::(55, integer, 5)
185::(55, ), ))
186::(55, {, {)
187::(56, immutable-constant, let)
188::(56, identifier, arr)
189::(56, colon, :)
190::(56, [, [)
191::(56, data-type, int)
192::(56, ], ])
193::(56, semi-colon, ;)
194::(57, }, })
195::(58, else, else)
196::(58, if, if)
197::(58, (, ()
198::(58, identifier, a)
199::(58, RelationalOperator, >)
200::(58, integer, 4)
201::(58, ), ))
202::(58, {, {)
203::(60, }, })
204::(61, continue, continue)
205::(61, semi-colon, ;)
206::(62, }, })
207::(63, if, if)
208::(63, (, ()
209::(63, identifier, b)
210::(63, RelationalOperator, <)
211::(63, integer, 5)
212::(63, ), ))
213::(63, {, {)
214::(64, while, while)
215::(64, (, ()
216::(64, identifier, b)
217::(64, RelationalOperator, ==)
218::(64, integer, 10)
219::(64, ), ))
220::(64, {, {)
221::(65, if, if)
222::(65, (, ()
223::(65, identifier, b)
224::(65, RelationalOperator, <)
225::(65, integer, 5)
226::(65, ), ))
227::(65, {, {)
228::(66, immutable-constant, let)
229::(66, identifier, arr)
230::(66, colon, :)
231::(66, [, [)
232::(66, data-type, int)
233::(66, ], ])
234::(66, semi-colon, ;)
235::(67, }, })
236::(68, else, else)
237::(68, if, if)
238::(68, (, ()
239::(68, identifier, a)
240::(68, RelationalOperator, >)
241::(68, integer, 4)
242::(68, ), ))
243::(68, {, {)
244::(70, }, })
245::(71, continue, continue)
246::(71, semi-colon, ;)
247::(72, }, })
248::(73, }, })
249::(74, else, else)
250::(74, if, if)
251::(74, (, ()
252::(74, identifier, a)
253::(74, RelationalOperator, >)
254::(74, integer, 4)
255::(74, ), ))
256::(74, {, {)
257::(76, }, })
258::(77, else, else)
259::(77, {, {)
260::(79, }, })
261::(81, identifier, try)
262::(81, {, {)
263::(82, if, if)
264::(82, (, ()
265::(82, identifier, b)
266::(82, RelationalOperator, <)
267::(82, integer, 5)
268::(82, ), ))
269::(82, {, {)
270::(83, immutable-constant, let)
271::(83, identifier, arr)
272::(83, colon, :)
273::(83, [, [)
274::(83, data-type, int)
275::(83, ], ])
276::(83, semi-colon, ;)
277::(84, }, })
278::(85, }, })
279::(86, identifier, catch)
280::(86, (, ()
281::(86, identifier, e)
282::(86, ), ))
283::(86, {, {)
284::(88, }, })
285::(90, }, })
286::(92, end-mark, $)
