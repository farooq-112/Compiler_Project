1::(1, class, class)
2::(1, identifier, X)
3::(1, keyword, extends)
4::(1, identifier, Yes)
5::(1, comma, ,)
6::(1, keyword, implements)
7::(1, identifier, X)
8::(1, comma, ,)
9::(1, identifier, Farooq)
10::(1, {, {)
11::(2, mutable-constant, var)
12::(2, identifier, farooq)
13::(2, comma, ,)
14::(2, identifier, noor)
15::(2, comma, ,)
16::(2, identifier, abbas)
17::(2, colon, :)
18::(2, data-type, int)
19::(4, access-modifier, public)
20::(4, static, static)
21::(4, func, func)
22::(4, identifier, Q)
23::(4, (, ()
24::(4, identifier, x)
25::(4, colon, :)
26::(4, data-type, int)
27::(4, ), ))
28::(4, {, {)
29::(5, mutable-constant, var)
30::(5, identifier, i)
31::(5, colon, :)
32::(5, data-type, int)
33::(5, UnaryOperator, =)
34::(5, integer, 10)
35::(6, while, while)
36::(6, (, ()
37::(6, identifier, i)
38::(6, RelationalOperator, ==)
39::(6, identifier, a)
40::(6, ), ))
41::(6, {, {)
42::(7, }, })
43::(9, }, })
44::(11, init, init)
45::(11, (, ()
46::(11, identifier, x)
47::(11, colon, :)
48::(11, data-type, int)
49::(11, ), ))
50::(11, {, {)
51::(13, }, })
52::(15, deinit, deinit)
53::(15, {, {)
54::(17, }, })
55::(18, }, })
56::(20, struct, struct)
57::(20, identifier, X)
58::(20, keyword, extends)
59::(20, identifier, Yes)
60::(20, comma, ,)
61::(20, keyword, implements)
62::(20, identifier, X)
63::(20, comma, ,)
64::(20, identifier, Farooq)
65::(20, {, {)
66::(21, mutable-constant, var)
67::(21, identifier, farooq)
68::(21, comma, ,)
69::(21, identifier, noor)
70::(21, comma, ,)
71::(21, identifier, abbas)
72::(21, colon, :)
73::(21, data-type, int)
74::(23, access-modifier, public)
75::(23, static, static)
76::(23, func, func)
77::(23, identifier, Q)
78::(23, (, ()
79::(23, identifier, x)
80::(23, colon, :)
81::(23, data-type, int)
82::(23, ), ))
83::(23, {, {)
84::(24, mutable-constant, var)
85::(24, identifier, i)
86::(24, colon, :)
87::(24, data-type, int)
88::(24, UnaryOperator, =)
89::(24, integer, 10)
90::(25, }, })
91::(26, init, init)
92::(26, (, ()
93::(26, identifier, x)
94::(26, colon, :)
95::(26, data-type, int)
96::(26, ), ))
97::(26, {, {)
98::(28, }, })
99::(30, deinit, deinit)
100::(30, {, {)
101::(32, }, })
102::(33, }, })
103::(35, enum, enum)
104::(35, identifier, A)
105::(35, colon, :)
106::(35, data-type, int)
107::(35, {, {)
108::(36, keyword, case)
109::(36, identifier, X)
110::(37, keyword, case)
111::(37, identifier, Y)
112::(38, }, })
113::(40, interface, protocol)
114::(40, identifier, A)
115::(40, {, {)
116::(42, }, })
117::(44, func, func)
118::(44, identifier, work)
119::(44, (, ()
120::(44, identifier, x)
121::(44, colon, :)
122::(44, data-type, int)
123::(44, ), ))
124::(44, {, {)
125::(45, mutable-constant, var)
126::(45, identifier, i)
127::(45, colon, :)
128::(45, data-type, int)
129::(45, UnaryOperator, =)
130::(45, identifier, a)
131::(46, mutable-constant, var)
132::(46, identifier, i)
133::(46, colon, :)
134::(46, data-type, int)
135::(46, UnaryOperator, =)
136::(46, string, "str")
137::(47, mutable-constant, var)
138::(47, identifier, i)
139::(47, colon, :)
140::(47, data-type, int)
141::(47, UnaryOperator, =)
142::(48, }, })
143::(50, Main, Main)
144::(50, (, ()
145::(50, ), ))
146::(50, {, {)
147::(51, mutable-constant, var)
148::(51, identifier, a)
149::(51, colon, :)
150::(51, data-type, int)
151::(51, UnaryOperator, =)
152::(51, integer, 10)
153::(52, immutable-constant, let)
154::(52, identifier, arr)
155::(52, colon, :)
156::(52, [, [)
157::(52, data-type, int)
158::(52, ], ])
159::(52, semi-colon, ;)
160::(53, immutable-constant, let)
161::(53, identifier, arr)
162::(53, colon, :)
163::(53, [, [)
164::(53, [, [)
165::(53, data-type, int)
166::(53, ], ])
167::(53, ], ])
168::(53, semi-colon, ;)
169::(54, while, while)
170::(54, (, ()
171::(54, identifier, b)
172::(54, RelationalOperator, ==)
173::(54, integer, 10)
174::(54, ), ))
175::(54, {, {)
176::(55, if, if)
177::(55, (, ()
178::(55, identifier, b)
179::(55, RelationalOperator, <)
180::(55, integer, 5)
181::(55, ), ))
182::(55, {, {)
183::(56, immutable-constant, let)
184::(56, identifier, arr)
185::(56, colon, :)
186::(56, [, [)
187::(56, data-type, int)
188::(56, ], ])
189::(56, semi-colon, ;)
190::(57, }, })
191::(58, else, else)
192::(58, if, if)
193::(58, (, ()
194::(58, identifier, a)
195::(58, RelationalOperator, >)
196::(58, integer, 4)
197::(58, ), ))
198::(58, {, {)
199::(60, }, })
200::(61, continue, continue)
201::(61, semi-colon, ;)
202::(62, }, })
203::(63, if, if)
204::(63, (, ()
205::(63, identifier, b)
206::(63, RelationalOperator, <)
207::(63, integer, 5)
208::(63, ), ))
209::(63, {, {)
210::(64, while, while)
211::(64, (, ()
212::(64, identifier, b)
213::(64, RelationalOperator, ==)
214::(64, integer, 10)
215::(64, ), ))
216::(64, {, {)
217::(65, if, if)
218::(65, (, ()
219::(65, identifier, b)
220::(65, RelationalOperator, <)
221::(65, integer, 5)
222::(65, ), ))
223::(65, {, {)
224::(66, immutable-constant, let)
225::(66, identifier, arr)
226::(66, colon, :)
227::(66, [, [)
228::(66, data-type, int)
229::(66, ], ])
230::(66, semi-colon, ;)
231::(67, }, })
232::(68, else, else)
233::(68, if, if)
234::(68, (, ()
235::(68, identifier, a)
236::(68, RelationalOperator, >)
237::(68, integer, 4)
238::(68, ), ))
239::(68, {, {)
240::(70, }, })
241::(71, continue, continue)
242::(71, semi-colon, ;)
243::(72, }, })
244::(73, }, })
245::(74, else, else)
246::(74, if, if)
247::(74, (, ()
248::(74, identifier, a)
249::(74, RelationalOperator, >)
250::(74, integer, 4)
251::(74, ), ))
252::(74, {, {)
253::(76, }, })
254::(77, else, else)
255::(77, {, {)
256::(79, }, })
257::(81, identifier, try)
258::(81, {, {)
259::(82, if, if)
260::(82, (, ()
261::(82, identifier, b)
262::(82, RelationalOperator, <)
263::(82, integer, 5)
264::(82, ), ))
265::(82, {, {)
266::(83, immutable-constant, let)
267::(83, identifier, arr)
268::(83, colon, :)
269::(83, [, [)
270::(83, data-type, int)
271::(83, ], ])
272::(83, semi-colon, ;)
273::(84, }, })
274::(85, }, })
275::(86, identifier, catch)
276::(86, (, ()
277::(86, identifier, e)
278::(86, ), ))
279::(86, {, {)
280::(88, }, })
281::(90, }, })
282::(92, end-mark, $)
