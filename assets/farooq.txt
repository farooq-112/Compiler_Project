1::(1, class, class)
2::(1, identifier, X)
3::(1, keyword, extends)
4::(1, identifier, Yes)
5::(1, keyword, implements)
6::(1, identifier, X)
7::(1, comma, ,)
8::(1, identifier, Farooq)
9::(1, {, {)
10::(2, mutable-constant, var)
11::(2, identifier, farooq)
12::(2, comma, ,)
13::(2, identifier, noor)
14::(2, comma, ,)
15::(2, identifier, abbas)
16::(2, colon, :)
17::(2, data-type, int)
18::(4, access-modifier, public)
19::(4, static, static)
20::(4, func, func)
21::(4, identifier, Q)
22::(4, (, ()
23::(4, identifier, x)
24::(4, colon, :)
25::(4, data-type, int)
26::(4, ), ))
27::(4, {, {)
28::(5, mutable-constant, var)
29::(5, identifier, i)
30::(5, colon, :)
31::(5, data-type, int)
32::(5, UnaryOperator, =)
33::(5, integer, 10)
34::(6, while, while)
35::(6, (, ()
36::(6, identifier, i)
37::(6, RelationalOperator, ==)
38::(6, identifier, a)
39::(6, ), ))
40::(6, {, {)
41::(7, }, })
42::(9, }, })
43::(11, init, init)
44::(11, (, ()
45::(11, identifier, x)
46::(11, colon, :)
47::(11, data-type, int)
48::(11, ), ))
49::(11, {, {)
50::(13, }, })
51::(15, deinit, deinit)
52::(15, {, {)
53::(17, }, })
54::(18, }, })
55::(20, struct, struct)
56::(20, identifier, X)
57::(20, keyword, extends)
58::(20, identifier, Yes)
59::(20, keyword, implements)
60::(20, identifier, X)
61::(20, comma, ,)
62::(20, identifier, Farooq)
63::(20, {, {)
64::(21, mutable-constant, var)
65::(21, identifier, farooq)
66::(21, comma, ,)
67::(21, identifier, noor)
68::(21, comma, ,)
69::(21, identifier, abbas)
70::(21, colon, :)
71::(21, data-type, int)
72::(23, access-modifier, public)
73::(23, static, static)
74::(23, func, func)
75::(23, identifier, Q)
76::(23, (, ()
77::(23, identifier, x)
78::(23, colon, :)
79::(23, data-type, int)
80::(23, ), ))
81::(23, {, {)
82::(24, mutable-constant, var)
83::(24, identifier, i)
84::(24, colon, :)
85::(24, data-type, int)
86::(24, UnaryOperator, =)
87::(24, integer, 10)
88::(25, }, })
89::(26, init, init)
90::(26, (, ()
91::(26, identifier, x)
92::(26, colon, :)
93::(26, data-type, int)
94::(26, ), ))
95::(26, {, {)
96::(28, }, })
97::(30, deinit, deinit)
98::(30, {, {)
99::(32, }, })
100::(33, }, })
101::(35, enum, enum)
102::(35, identifier, A)
103::(35, colon, :)
104::(35, data-type, int)
105::(35, {, {)
106::(36, keyword, case)
107::(36, identifier, X)
108::(37, keyword, case)
109::(37, identifier, Y)
110::(38, }, })
111::(40, interface, protocol)
112::(40, identifier, A)
113::(40, keyword, implements)
114::(40, identifier, X)
115::(40, comma, ,)
116::(40, identifier, Y)
117::(40, comma, ,)
118::(40, identifier, Z)
119::(40, {, {)
120::(42, }, })
121::(44, func, func)
122::(44, identifier, work1)
123::(44, (, ()
124::(44, ), ))
125::(44, {, {)
126::(45, mutable-constant, var)
127::(45, identifier, i)
128::(45, colon, :)
129::(45, data-type, int)
130::(45, UnaryOperator, =)
131::(45, identifier, a)
132::(46, mutable-constant, var)
133::(46, identifier, i)
134::(46, colon, :)
135::(46, data-type, int)
136::(46, UnaryOperator, =)
137::(46, string, "str")
138::(47, mutable-constant, var)
139::(47, identifier, i)
140::(47, colon, :)
141::(47, data-type, int)
142::(47, UnaryOperator, =)
143::(48, }, })
144::(50, func, func)
145::(50, identifier, work)
146::(50, (, ()
147::(50, identifier, x)
148::(50, colon, :)
149::(50, data-type, int)
150::(50, ), ))
151::(50, {, {)
152::(51, mutable-constant, var)
153::(51, identifier, i)
154::(51, colon, :)
155::(51, data-type, int)
156::(51, UnaryOperator, =)
157::(51, identifier, a)
158::(52, mutable-constant, var)
159::(52, identifier, i)
160::(52, colon, :)
161::(52, data-type, int)
162::(52, UnaryOperator, =)
163::(52, string, "str")
164::(53, mutable-constant, var)
165::(53, identifier, i)
166::(53, colon, :)
167::(53, data-type, int)
168::(53, UnaryOperator, =)
169::(54, }, })
170::(55, identifier, work1)
171::(55, (, ()
172::(55, ), ))
173::(55, semi-colon, ;)
174::(56, identifier, work)
175::(56, (, ()
176::(56, identifier, x)
177::(56, colon, :)
178::(56, data-type, int)
179::(56, ), ))
180::(56, semi-colon, ;)
181::(58, Main, Main)
182::(58, (, ()
183::(58, ), ))
184::(58, {, {)
185::(59, mutable-constant, var)
186::(59, identifier, a)
187::(59, colon, :)
188::(59, data-type, int)
189::(59, UnaryOperator, =)
190::(59, integer, 10)
191::(60, immutable-constant, let)
192::(60, identifier, arr)
193::(60, colon, :)
194::(60, [, [)
195::(60, data-type, int)
196::(60, ], ])
197::(60, semi-colon, ;)
198::(61, immutable-constant, let)
199::(61, identifier, arr)
200::(61, colon, :)
201::(61, [, [)
202::(61, [, [)
203::(61, data-type, int)
204::(61, ], ])
205::(61, ], ])
206::(61, semi-colon, ;)
207::(62, while, while)
208::(62, (, ()
209::(62, identifier, b)
210::(62, RelationalOperator, ==)
211::(62, integer, 10)
212::(62, ), ))
213::(62, {, {)
214::(63, if, if)
215::(63, (, ()
216::(63, identifier, b)
217::(63, RelationalOperator, <)
218::(63, integer, 5)
219::(63, ), ))
220::(63, {, {)
221::(64, immutable-constant, let)
222::(64, identifier, arr)
223::(64, colon, :)
224::(64, [, [)
225::(64, data-type, int)
226::(64, ], ])
227::(64, semi-colon, ;)
228::(65, }, })
229::(66, else, else)
230::(66, if, if)
231::(66, (, ()
232::(66, identifier, a)
233::(66, RelationalOperator, >)
234::(66, integer, 4)
235::(66, ), ))
236::(66, {, {)
237::(67, identifier, work)
238::(67, (, ()
239::(67, ), ))
240::(67, semi-colon, ;)
241::(68, immutable-constant, let)
242::(68, identifier, arr)
243::(68, colon, :)
244::(68, data-type, int)
245::(68, UnaryOperator, =)
246::(68, identifier, work)
247::(68, (, ()
248::(68, identifier, x)
249::(68, colon, :)
250::(68, data-type, int)
251::(68, ), ))
252::(68, semi-colon, ;)
253::(69, }, })
254::(70, continue, continue)
255::(70, semi-colon, ;)
256::(71, }, })
257::(72, if, if)
258::(72, (, ()
259::(72, identifier, b)
260::(72, RelationalOperator, <)
261::(72, integer, 5)
262::(72, ), ))
263::(72, {, {)
264::(73, while, while)
265::(73, (, ()
266::(73, identifier, b)
267::(73, RelationalOperator, ==)
268::(73, integer, 10)
269::(73, ), ))
270::(73, {, {)
271::(74, if, if)
272::(74, (, ()
273::(74, identifier, b)
274::(74, RelationalOperator, <)
275::(74, integer, 5)
276::(74, ), ))
277::(74, {, {)
278::(75, immutable-constant, let)
279::(75, identifier, arr)
280::(75, colon, :)
281::(75, [, [)
282::(75, data-type, int)
283::(75, ], ])
284::(75, semi-colon, ;)
285::(76, }, })
286::(77, else, else)
287::(77, if, if)
288::(77, (, ()
289::(77, identifier, a)
290::(77, RelationalOperator, >)
291::(77, integer, 4)
292::(77, ), ))
293::(77, {, {)
294::(79, }, })
295::(80, continue, continue)
296::(80, semi-colon, ;)
297::(81, }, })
298::(82, }, })
299::(83, else, else)
300::(83, if, if)
301::(83, (, ()
302::(83, identifier, a)
303::(83, RelationalOperator, >)
304::(83, integer, 4)
305::(83, ), ))
306::(83, {, {)
307::(85, }, })
308::(86, else, else)
309::(86, {, {)
310::(88, }, })
311::(90, identifier, try)
312::(90, {, {)
313::(91, if, if)
314::(91, (, ()
315::(91, identifier, b)
316::(91, RelationalOperator, <)
317::(91, integer, 5)
318::(91, ), ))
319::(91, {, {)
320::(92, immutable-constant, let)
321::(92, identifier, arr)
322::(92, colon, :)
323::(92, [, [)
324::(92, data-type, int)
325::(92, ], ])
326::(92, semi-colon, ;)
327::(93, }, })
328::(94, }, })
329::(95, identifier, catch)
330::(95, (, ()
331::(95, identifier, e)
332::(95, ), ))
333::(95, {, {)
334::(97, }, })
335::(99, }, })
336::(101, end-mark, $)
