1::(1, func, func)
2::(1, identifier, gst)
3::(1, (, ()
4::(1, ), ))
5::(1, {, {)
6::(2, mutable-constant, var)
7::(2, identifier, a)
8::(2, colon, :)
9::(2, data-type, int)
10::(2, UnaryOperator, =)
11::(2, int, 9)
12::(2, PlusMinus, +)
13::(2, int, 6)
14::(2, MultipyDivide, *)
15::(2, int, 3)
16::(2, semi-colon, ;)
17::(3, mutable-constant, var)
18::(3, identifier, y)
19::(3, colon, :)
20::(3, data-type, float)
21::(3, UnaryOperator, =)
22::(3, float, 12.0)
23::(3, semi-colon, ;)
24::(4, mutable-constant, var)
25::(4, identifier, x)
26::(4, colon, :)
27::(4, data-type, float)
28::(4, UnaryOperator, =)
29::(4, identifier, a)
30::(4, PlusMinus, +)
31::(4, identifier, y)
32::(4, semi-colon, ;)
33::(6, while, while)
34::(6, (, ()
35::(6, identifier, a)
36::(6, ), ))
37::(6, {, {)
38::(8, }, })
39::(9, }, })
40::(10, class, class)
41::(10, identifier, Z)
42::(10, {, {)
43::(12, }, })
44::(17, access-modifier, public)
45::(17, final, final)
46::(17, class, class)
47::(17, identifier, Yes)
48::(17, keyword, extends)
49::(17, identifier, Z)
50::(17, {, {)
51::(19, }, })
52::(20, interface, protocol)
53::(20, identifier, K)
54::(20, {, {)
55::(22, }, })
56::(24, struct, struct)
57::(24, identifier, W)
58::(24, keyword, implements)
59::(24, identifier, K)
60::(24, {, {)
61::(25, mutable-constant, var)
62::(25, identifier, farooq)
63::(25, comma, ,)
64::(25, identifier, noor)
65::(25, comma, ,)
66::(25, identifier, abbas)
67::(25, colon, :)
68::(25, data-type, int)
69::(26, mutable-constant, var)
70::(26, identifier, noor)
71::(26, colon, :)
72::(26, data-type, int)
73::(27, access-modifier, public)
74::(27, static, static)
75::(27, func, func)
76::(27, identifier, Q)
77::(27, (, ()
78::(27, identifier, x)
79::(27, colon, :)
80::(27, data-type, int)
81::(27, ), ))
82::(27, {, {)
83::(28, mutable-constant, var)
84::(28, identifier, i)
85::(28, colon, :)
86::(28, data-type, int)
87::(28, UnaryOperator, =)
88::(28, int, 10)
89::(28, semi-colon, ;)
90::(29, }, })
91::(30, access-modifier, public)
92::(30, static, static)
93::(30, func, func)
94::(30, identifier, Q)
95::(30, (, ()
96::(30, identifier, x)
97::(30, colon, :)
98::(30, data-type, int)
99::(30, ), ))
100::(30, {, {)
101::(31, mutable-constant, var)
102::(31, identifier, i)
103::(31, colon, :)
104::(31, data-type, int)
105::(31, UnaryOperator, =)
106::(31, int, 10)
107::(31, semi-colon, ;)
108::(32, }, })
109::(33, init, init)
110::(33, (, ()
111::(33, identifier, x)
112::(33, colon, :)
113::(33, data-type, int)
114::(33, ), ))
115::(33, {, {)
116::(35, }, })
117::(37, deinit, deinit)
118::(37, {, {)
119::(39, }, })
120::(40, }, })
121::(42, class, class)
122::(42, identifier, A)
123::(42, {, {)
124::(43, mutable-constant, var)
125::(43, identifier, farooq)
126::(43, comma, ,)
127::(43, identifier, noor)
128::(43, comma, ,)
129::(43, identifier, abbas)
130::(43, colon, :)
131::(43, data-type, int)
132::(43, UnaryOperator, =)
133::(43, int, 10)
134::(44, mutable-constant, var)
135::(44, identifier, r)
136::(44, comma, ,)
137::(44, identifier, t)
138::(44, comma, ,)
139::(44, identifier, d)
140::(44, colon, :)
141::(44, data-type, int)
142::(45, mutable-constant, var)
143::(45, identifier, w)
144::(45, comma, ,)
145::(45, identifier, e)
146::(45, comma, ,)
147::(45, identifier, m)
148::(45, colon, :)
149::(45, data-type, float)
150::(47, func, func)
151::(47, identifier, mst)
152::(47, (, ()
153::(47, ), ))
154::(47, {, {)
155::(48, mutable-constant, var)
156::(48, identifier, a)
157::(48, comma, ,)
158::(48, identifier, n)
159::(48, colon, :)
160::(48, data-type, int)
161::(48, UnaryOperator, =)
162::(48, int, 6)
163::(48, semi-colon, ;)
164::(49, mutable-constant, var)
165::(49, identifier, q)
166::(49, colon, :)
167::(49, data-type, int)
168::(49, UnaryOperator, =)
169::(49, int, 6)
170::(49, semi-colon, ;)
171::(51, }, })
172::(52, }, })
173::(56, interface, protocol)
174::(56, identifier, J)
175::(56, {, {)
176::(58, }, })
177::(63, access-modifier, public)
178::(63, static, static)
179::(63, class, class)
180::(63, identifier, L)
181::(63, keyword, extends)
182::(63, identifier, Yes)
183::(63, keyword, implements)
184::(63, identifier, J)
185::(63, comma, ,)
186::(63, identifier, K)
187::(63, {, {)
188::(64, mutable-constant, var)
189::(64, identifier, farooq)
190::(64, comma, ,)
191::(64, identifier, noor)
192::(64, comma, ,)
193::(64, identifier, abbas)
194::(64, colon, :)
195::(64, data-type, int)
196::(66, access-modifier, public)
197::(66, static, static)
198::(66, func, func)
199::(66, identifier, Q)
200::(66, (, ()
201::(66, identifier, x)
202::(66, colon, :)
203::(66, data-type, int)
204::(66, comma, ,)
205::(66, identifier, y)
206::(66, colon, :)
207::(66, data-type, float)
208::(66, ), ))
209::(66, ret-type, ->)
210::(66, data-type, float)
211::(66, {, {)
212::(67, mutable-constant, var)
213::(67, identifier, i)
214::(67, colon, :)
215::(67, data-type, int)
216::(67, UnaryOperator, =)
217::(67, int, 10)
218::(67, semi-colon, ;)
219::(68, mutable-constant, var)
220::(68, identifier, a)
221::(68, colon, :)
222::(68, data-type, int)
223::(68, UnaryOperator, =)
224::(68, int, 10)
225::(68, semi-colon, ;)
226::(69, while, while)
227::(69, (, ()
228::(69, identifier, i)
229::(69, RelationalOperator, ==)
230::(69, identifier, a)
231::(69, ), ))
232::(69, {, {)
233::(70, }, })
234::(72, }, })
235::(74, init, init)
236::(74, (, ()
237::(74, identifier, x)
238::(74, colon, :)
239::(74, data-type, int)
240::(74, ), ))
241::(74, {, {)
242::(76, }, })
243::(78, deinit, deinit)
244::(78, {, {)
245::(80, }, })
246::(81, }, })
247::(106, func, func)
248::(106, identifier, work1)
249::(106, (, ()
250::(106, ), ))
251::(106, {, {)
252::(107, mutable-constant, var)
253::(107, identifier, r)
254::(107, colon, :)
255::(107, data-type, int)
256::(107, UnaryOperator, =)
257::(107, int, 0)
258::(107, semi-colon, ;)
259::(108, mutable-constant, var)
260::(108, identifier, t)
261::(108, colon, :)
262::(108, data-type, int)
263::(108, semi-colon, ;)
264::(109, }, })
265::(111, func, func)
266::(111, identifier, work)
267::(111, (, ()
268::(111, identifier, x)
269::(111, colon, :)
270::(111, data-type, int)
271::(111, ), ))
272::(111, {, {)
273::(113, mutable-constant, var)
274::(113, identifier, i)
275::(113, colon, :)
276::(113, data-type, int)
277::(113, UnaryOperator, =)
278::(113, int, 0)
279::(113, semi-colon, ;)
280::(114, identifier, this)
281::(114, dot, .)
282::(114, identifier, id)
283::(114, dot, .)
284::(114, identifier, id)
285::(115, }, })
286::(117, Main, Main)
287::(117, (, ()
288::(117, ), ))
289::(117, {, {)
290::(118, immutable-constant, let)
291::(118, identifier, arr)
292::(118, colon, :)
293::(118, [, [)
294::(118, [, [)
295::(118, data-type, int)
296::(118, ], ])
297::(118, ], ])
298::(118, semi-colon, ;)
299::(119, mutable-constant, var)
300::(119, identifier, obj)
301::(119, colon, :)
302::(119, identifier, Yes)
303::(119, UnaryOperator, =)
304::(119, identifier, Z)
305::(119, dot, .)
306::(119, init, init)
307::(119, (, ()
308::(119, ), ))
309::(119, semi-colon, ;)
310::(121, identifier, try)
311::(121, {, {)
312::(128, }, })
313::(129, identifier, catch)
314::(129, (, ()
315::(129, identifier, e)
316::(129, ), ))
317::(129, {, {)
318::(131, }, })
319::(133, }, })
320::(150, end-mark, $)
