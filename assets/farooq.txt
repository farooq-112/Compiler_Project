1::(1, access-modifier, public)
2::(1, static, static)
3::(1, class, class)
4::(1, identifier, X)
5::(1, keyword, extends)
6::(1, identifier, Yes)
7::(1, keyword, implements)
8::(1, identifier, X)
9::(1, comma, ,)
10::(1, identifier, Farooq)
11::(1, {, {)
12::(2, mutable-constant, var)
13::(2, identifier, farooq)
14::(2, comma, ,)
15::(2, identifier, noor)
16::(2, comma, ,)
17::(2, identifier, abbas)
18::(2, colon, :)
19::(2, data-type, int)
20::(4, access-modifier, public)
21::(4, static, static)
22::(4, func, func)
23::(4, identifier, Q)
24::(4, (, ()
25::(4, identifier, x)
26::(4, colon, :)
27::(4, data-type, int)
28::(4, ), ))
29::(4, {, {)
30::(5, mutable-constant, var)
31::(5, identifier, i)
32::(5, colon, :)
33::(5, data-type, int)
34::(5, UnaryOperator, =)
35::(5, integer, 10)
36::(6, while, while)
37::(6, (, ()
38::(6, identifier, i)
39::(6, RelationalOperator, ==)
40::(6, identifier, a)
41::(6, ), ))
42::(6, {, {)
43::(7, }, })
44::(9, }, })
45::(11, init, init)
46::(11, (, ()
47::(11, identifier, x)
48::(11, colon, :)
49::(11, data-type, int)
50::(11, ), ))
51::(11, {, {)
52::(13, }, })
53::(15, deinit, deinit)
54::(15, {, {)
55::(17, }, })
56::(18, }, })
57::(20, struct, struct)
58::(20, identifier, X)
59::(20, keyword, extends)
60::(20, identifier, Yes)
61::(20, keyword, implements)
62::(20, identifier, X)
63::(20, comma, ,)
64::(20, identifier, Farooq)
65::(20, {, {)
66::(21, mutable-constant, var)
67::(21, identifier, farooq)
68::(21, comma, ,)
69::(21, identifier, noor)
70::(21, comma, ,)
71::(21, identifier, abbas)
72::(21, colon, :)
73::(21, data-type, int)
74::(23, access-modifier, public)
75::(23, static, static)
76::(23, func, func)
77::(23, identifier, Q)
78::(23, (, ()
79::(23, identifier, x)
80::(23, colon, :)
81::(23, data-type, int)
82::(23, ), ))
83::(23, {, {)
84::(24, mutable-constant, var)
85::(24, identifier, i)
86::(24, colon, :)
87::(24, data-type, int)
88::(24, UnaryOperator, =)
89::(24, integer, 10)
90::(25, }, })
91::(26, init, init)
92::(26, (, ()
93::(26, identifier, x)
94::(26, colon, :)
95::(26, data-type, int)
96::(26, ), ))
97::(26, {, {)
98::(28, }, })
99::(30, deinit, deinit)
100::(30, {, {)
101::(32, }, })
102::(33, }, })
103::(35, enum, enum)
104::(35, identifier, A)
105::(35, colon, :)
106::(35, data-type, int)
107::(35, {, {)
108::(36, keyword, case)
109::(36, identifier, X)
110::(37, keyword, case)
111::(37, identifier, Y)
112::(38, }, })
113::(40, interface, protocol)
114::(40, identifier, A)
115::(40, keyword, implements)
116::(40, identifier, X)
117::(40, comma, ,)
118::(40, identifier, Y)
119::(40, comma, ,)
120::(40, identifier, Z)
121::(40, {, {)
122::(42, }, })
123::(44, func, func)
124::(44, identifier, work1)
125::(44, (, ()
126::(44, ), ))
127::(44, {, {)
128::(45, mutable-constant, var)
129::(45, identifier, i)
130::(45, colon, :)
131::(45, data-type, int)
132::(45, UnaryOperator, =)
133::(45, identifier, a)
134::(46, mutable-constant, var)
135::(46, identifier, i)
136::(46, colon, :)
137::(46, data-type, int)
138::(46, UnaryOperator, =)
139::(46, string, "str")
140::(47, mutable-constant, var)
141::(47, identifier, i)
142::(47, colon, :)
143::(47, data-type, int)
144::(47, UnaryOperator, =)
145::(48, }, })
146::(50, func, func)
147::(50, identifier, work)
148::(50, (, ()
149::(50, identifier, x)
150::(50, colon, :)
151::(50, data-type, int)
152::(50, ), ))
153::(50, {, {)
154::(51, mutable-constant, var)
155::(51, identifier, i)
156::(51, colon, :)
157::(51, data-type, int)
158::(51, UnaryOperator, =)
159::(51, identifier, a)
160::(52, mutable-constant, var)
161::(52, identifier, i)
162::(52, colon, :)
163::(52, data-type, int)
164::(52, UnaryOperator, =)
165::(52, string, "str")
166::(53, mutable-constant, var)
167::(53, identifier, i)
168::(53, colon, :)
169::(53, data-type, int)
170::(53, UnaryOperator, =)
171::(54, }, })
172::(56, Main, Main)
173::(56, (, ()
174::(56, ), ))
175::(56, {, {)
176::(57, mutable-constant, var)
177::(57, identifier, a)
178::(57, colon, :)
179::(57, data-type, int)
180::(57, UnaryOperator, =)
181::(57, integer, 10)
182::(58, immutable-constant, let)
183::(58, identifier, arr)
184::(58, colon, :)
185::(58, [, [)
186::(58, data-type, int)
187::(58, ], ])
188::(58, semi-colon, ;)
189::(59, immutable-constant, let)
190::(59, identifier, arr)
191::(59, colon, :)
192::(59, [, [)
193::(59, [, [)
194::(59, data-type, int)
195::(59, ], ])
196::(59, ], ])
197::(59, semi-colon, ;)
198::(60, while, while)
199::(60, (, ()
200::(60, identifier, b)
201::(60, dot, .)
202::(60, identifier, a)
203::(60, dot, .)
204::(60, identifier, fn)
205::(60, (, ()
206::(60, identifier, a)
207::(60, colon, :)
208::(60, data-type, int)
209::(60, ), ))
210::(60, RelationalOperator, ==)
211::(60, integer, 10)
212::(60, ), ))
213::(60, {, {)
214::(62, if, if)
215::(62, (, ()
216::(62, identifier, b)
217::(62, RelationalOperator, <)
218::(62, integer, 5)
219::(62, ), ))
220::(62, {, {)
221::(63, immutable-constant, let)
222::(63, identifier, arr)
223::(63, colon, :)
224::(63, [, [)
225::(63, data-type, int)
226::(63, ], ])
227::(63, semi-colon, ;)
228::(64, }, })
229::(65, else, else)
230::(65, if, if)
231::(65, (, ()
232::(65, identifier, a)
233::(65, RelationalOperator, >)
234::(65, integer, 4)
235::(65, ), ))
236::(65, {, {)
237::(66, identifier, this)
238::(66, dot, .)
239::(66, identifier, a)
240::(66, inc-dec, ++)
241::(66, inc-dec, ++)
242::(67, immutable-constant, let)
243::(67, identifier, arr)
244::(67, colon, :)
245::(67, data-type, int)
246::(67, UnaryOperator, =)
247::(67, identifier, work)
248::(67, (, ()
249::(67, identifier, x)
250::(67, colon, :)
251::(67, data-type, int)
252::(67, comma, ,)
253::(67, integer, 5)
254::(67, colon, :)
255::(67, data-type, int)
256::(67, ), ))
257::(67, semi-colon, ;)
258::(68, }, })
259::(69, continue, continue)
260::(69, semi-colon, ;)
261::(70, }, })
262::(71, if, if)
263::(71, (, ()
264::(71, identifier, b)
265::(71, RelationalOperator, <)
266::(71, integer, 5)
267::(71, ), ))
268::(71, {, {)
269::(72, while, while)
270::(72, (, ()
271::(72, identifier, b)
272::(72, RelationalOperator, ==)
273::(72, integer, 10)
274::(72, ), ))
275::(72, {, {)
276::(73, if, if)
277::(73, (, ()
278::(73, identifier, b)
279::(73, RelationalOperator, <)
280::(73, integer, 5)
281::(73, ), ))
282::(73, {, {)
283::(74, immutable-constant, let)
284::(74, identifier, arr)
285::(74, colon, :)
286::(74, [, [)
287::(74, data-type, int)
288::(74, ], ])
289::(74, semi-colon, ;)
290::(75, }, })
291::(76, else, else)
292::(76, if, if)
293::(76, (, ()
294::(76, identifier, a)
295::(76, RelationalOperator, >)
296::(76, integer, 4)
297::(76, ), ))
298::(76, {, {)
299::(78, }, })
300::(79, continue, continue)
301::(79, semi-colon, ;)
302::(80, }, })
303::(81, }, })
304::(82, else, else)
305::(82, if, if)
306::(82, (, ()
307::(82, identifier, a)
308::(82, RelationalOperator, >)
309::(82, integer, 4)
310::(82, ), ))
311::(82, {, {)
312::(84, }, })
313::(85, else, else)
314::(85, {, {)
315::(87, }, })
316::(89, identifier, try)
317::(89, {, {)
318::(90, if, if)
319::(90, (, ()
320::(90, identifier, b)
321::(90, RelationalOperator, <)
322::(90, integer, 5)
323::(90, ), ))
324::(90, {, {)
325::(91, immutable-constant, let)
326::(91, identifier, arr)
327::(91, colon, :)
328::(91, [, [)
329::(91, data-type, int)
330::(91, ], ])
331::(91, semi-colon, ;)
332::(92, }, })
333::(93, }, })
334::(94, identifier, catch)
335::(94, (, ()
336::(94, identifier, e)
337::(94, ), ))
338::(94, {, {)
339::(96, }, })
340::(98, }, })
341::(100, class, class)
342::(100, identifier, X)
343::(100, keyword, extends)
344::(100, identifier, Yes)
345::(100, keyword, implements)
346::(100, identifier, X)
347::(100, comma, ,)
348::(100, identifier, Farooq)
349::(100, {, {)
350::(101, mutable-constant, var)
351::(101, identifier, farooq)
352::(101, comma, ,)
353::(101, identifier, noor)
354::(101, comma, ,)
355::(101, identifier, abbas)
356::(101, colon, :)
357::(101, data-type, int)
358::(103, access-modifier, public)
359::(103, static, static)
360::(103, func, func)
361::(103, identifier, Q)
362::(103, (, ()
363::(103, identifier, x)
364::(103, colon, :)
365::(103, data-type, int)
366::(103, ), ))
367::(103, {, {)
368::(104, mutable-constant, var)
369::(104, identifier, i)
370::(104, colon, :)
371::(104, data-type, int)
372::(104, UnaryOperator, =)
373::(104, integer, 10)
374::(105, while, while)
375::(105, (, ()
376::(105, identifier, i)
377::(105, RelationalOperator, ==)
378::(105, identifier, a)
379::(105, ), ))
380::(105, {, {)
381::(106, }, })
382::(108, }, })
383::(110, init, init)
384::(110, (, ()
385::(110, identifier, x)
386::(110, colon, :)
387::(110, data-type, int)
388::(110, ), ))
389::(110, {, {)
390::(112, }, })
391::(114, deinit, deinit)
392::(114, {, {)
393::(116, }, })
394::(117, }, })
395::(121, end-mark, $)
