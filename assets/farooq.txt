1::(1, interface, protocol)
2::(1, identifier, J)
3::(1, {, {)
4::(3, }, })
5::(4, interface, protocol)
6::(4, identifier, K)
7::(4, {, {)
8::(6, }, })
9::(8, class, class)
10::(8, identifier, Yes)
11::(8, {, {)
12::(10, }, })
13::(12, access-modifier, public)
14::(12, static, static)
15::(12, class, class)
16::(12, identifier, X)
17::(12, keyword, extends)
18::(12, identifier, Yes)
19::(12, keyword, implements)
20::(12, identifier, J)
21::(12, comma, ,)
22::(12, identifier, K)
23::(12, {, {)
24::(13, mutable-constant, var)
25::(13, identifier, farooq)
26::(13, comma, ,)
27::(13, identifier, noor)
28::(13, comma, ,)
29::(13, identifier, abbas)
30::(13, colon, :)
31::(13, data-type, int)
32::(15, access-modifier, public)
33::(15, static, static)
34::(15, func, func)
35::(15, identifier, Q)
36::(15, (, ()
37::(15, identifier, x)
38::(15, colon, :)
39::(15, data-type, int)
40::(15, comma, ,)
41::(15, identifier, y)
42::(15, colon, :)
43::(15, data-type, float)
44::(15, ), ))
45::(15, ret-type, ->)
46::(15, data-type, float)
47::(15, {, {)
48::(16, mutable-constant, var)
49::(16, identifier, i)
50::(16, colon, :)
51::(16, data-type, int)
52::(16, UnaryOperator, =)
53::(16, int, 10)
54::(17, while, while)
55::(17, (, ()
56::(17, identifier, i)
57::(17, RelationalOperator, ==)
58::(17, identifier, a)
59::(17, ), ))
60::(17, {, {)
61::(18, }, })
62::(20, }, })
63::(22, init, init)
64::(22, (, ()
65::(22, identifier, x)
66::(22, colon, :)
67::(22, data-type, int)
68::(22, ), ))
69::(22, {, {)
70::(24, }, })
71::(26, deinit, deinit)
72::(26, {, {)
73::(28, }, })
74::(29, }, })
75::(31, struct, struct)
76::(31, identifier, W)
77::(31, keyword, extends)
78::(31, identifier, Yes)
79::(31, keyword, implements)
80::(31, identifier, J)
81::(31, comma, ,)
82::(31, identifier, K)
83::(31, {, {)
84::(32, mutable-constant, var)
85::(32, identifier, farooq)
86::(32, comma, ,)
87::(32, identifier, noor)
88::(32, comma, ,)
89::(32, identifier, abbas)
90::(32, colon, :)
91::(32, data-type, int)
92::(34, access-modifier, public)
93::(34, static, static)
94::(34, func, func)
95::(34, identifier, Q)
96::(34, (, ()
97::(34, identifier, x)
98::(34, colon, :)
99::(34, data-type, int)
100::(34, ), ))
101::(34, {, {)
102::(35, mutable-constant, var)
103::(35, identifier, i)
104::(35, colon, :)
105::(35, data-type, int)
106::(35, UnaryOperator, =)
107::(35, int, 10)
108::(36, }, })
109::(37, init, init)
110::(37, (, ()
111::(37, identifier, x)
112::(37, colon, :)
113::(37, data-type, int)
114::(37, ), ))
115::(37, {, {)
116::(39, }, })
117::(41, deinit, deinit)
118::(41, {, {)
119::(43, }, })
120::(44, }, })
121::(55, func, func)
122::(55, identifier, work1)
123::(55, (, ()
124::(55, ), ))
125::(55, {, {)
126::(56, mutable-constant, var)
127::(56, identifier, r)
128::(56, colon, :)
129::(56, data-type, int)
130::(56, UnaryOperator, =)
131::(56, identifier, a)
132::(57, mutable-constant, var)
133::(57, identifier, i)
134::(57, colon, :)
135::(57, data-type, int)
136::(57, UnaryOperator, =)
137::(57, string, "str")
138::(58, mutable-constant, var)
139::(58, identifier, c)
140::(58, colon, :)
141::(58, data-type, int)
142::(58, UnaryOperator, =)
143::(59, }, })
144::(61, func, func)
145::(61, identifier, work)
146::(61, (, ()
147::(61, identifier, x)
148::(61, colon, :)
149::(61, data-type, int)
150::(61, ), ))
151::(61, {, {)
152::(62, mutable-constant, var)
153::(62, identifier, i)
154::(62, colon, :)
155::(62, data-type, int)
156::(62, UnaryOperator, =)
157::(62, identifier, a)
158::(63, mutable-constant, var)
159::(63, identifier, i)
160::(63, colon, :)
161::(63, data-type, int)
162::(63, UnaryOperator, =)
163::(63, string, "str")
164::(64, mutable-constant, var)
165::(64, identifier, i)
166::(64, colon, :)
167::(64, data-type, int)
168::(64, UnaryOperator, =)
169::(65, }, })
170::(67, Main, Main)
171::(67, (, ()
172::(67, ), ))
173::(67, {, {)
174::(68, mutable-constant, var)
175::(68, identifier, a)
176::(68, colon, :)
177::(68, data-type, int)
178::(68, UnaryOperator, =)
179::(68, int, 4)
180::(69, immutable-constant, let)
181::(69, identifier, arr)
182::(69, colon, :)
183::(69, [, [)
184::(69, data-type, int)
185::(69, ], ])
186::(69, semi-colon, ;)
187::(70, immutable-constant, let)
188::(70, identifier, arr)
189::(70, colon, :)
190::(70, [, [)
191::(70, [, [)
192::(70, data-type, int)
193::(70, ], ])
194::(70, ], ])
195::(70, semi-colon, ;)
196::(71, while, while)
197::(71, (, ()
198::(71, identifier, b)
199::(71, dot, .)
200::(71, identifier, a)
201::(71, dot, .)
202::(71, identifier, fn)
203::(71, (, ()
204::(71, ), ))
205::(71, RelationalOperator, ==)
206::(71, int, 10)
207::(71, ), ))
208::(71, {, {)
209::(73, if, if)
210::(73, (, ()
211::(73, identifier, b)
212::(73, RelationalOperator, <)
213::(73, int, 5)
214::(73, ), ))
215::(73, {, {)
216::(74, immutable-constant, let)
217::(74, identifier, arr)
218::(74, colon, :)
219::(74, [, [)
220::(74, data-type, int)
221::(74, ], ])
222::(74, semi-colon, ;)
223::(75, }, })
224::(76, else, else)
225::(76, if, if)
226::(76, (, ()
227::(76, identifier, a)
228::(76, RelationalOperator, >)
229::(76, int, 4)
230::(76, ), ))
231::(76, {, {)
232::(77, identifier, this)
233::(77, dot, .)
234::(77, identifier, a)
235::(77, inc-dec, ++)
236::(77, inc-dec, ++)
237::(78, immutable-constant, let)
238::(78, identifier, arr)
239::(78, colon, :)
240::(78, data-type, int)
241::(78, UnaryOperator, =)
242::(78, identifier, work)
243::(78, (, ()
244::(78, identifier, x)
245::(78, colon, :)
246::(78, data-type, int)
247::(78, comma, ,)
248::(78, int, 5)
249::(78, colon, :)
250::(78, data-type, int)
251::(78, ), ))
252::(78, semi-colon, ;)
253::(79, }, })
254::(80, continue, continue)
255::(80, semi-colon, ;)
256::(81, }, })
257::(82, if, if)
258::(82, (, ()
259::(82, identifier, b)
260::(82, RelationalOperator, <)
261::(82, int, 5)
262::(82, ), ))
263::(82, {, {)
264::(83, while, while)
265::(83, (, ()
266::(83, identifier, b)
267::(83, RelationalOperator, ==)
268::(83, int, 10)
269::(83, ), ))
270::(83, {, {)
271::(84, if, if)
272::(84, (, ()
273::(84, identifier, b)
274::(84, RelationalOperator, <)
275::(84, int, 5)
276::(84, ), ))
277::(84, {, {)
278::(85, immutable-constant, let)
279::(85, identifier, arr)
280::(85, colon, :)
281::(85, [, [)
282::(85, data-type, int)
283::(85, ], ])
284::(85, semi-colon, ;)
285::(86, }, })
286::(87, else, else)
287::(87, if, if)
288::(87, (, ()
289::(87, identifier, a)
290::(87, RelationalOperator, >)
291::(87, int, 4)
292::(87, ), ))
293::(87, {, {)
294::(89, }, })
295::(90, continue, continue)
296::(90, semi-colon, ;)
297::(91, }, })
298::(92, }, })
299::(93, else, else)
300::(93, if, if)
301::(93, (, ()
302::(93, identifier, a)
303::(93, RelationalOperator, >)
304::(93, int, 4)
305::(93, ), ))
306::(93, {, {)
307::(95, }, })
308::(96, else, else)
309::(96, {, {)
310::(98, }, })
311::(100, identifier, try)
312::(100, {, {)
313::(101, if, if)
314::(101, (, ()
315::(101, identifier, b)
316::(101, RelationalOperator, <)
317::(101, int, 5)
318::(101, ), ))
319::(101, {, {)
320::(102, immutable-constant, let)
321::(102, identifier, arr)
322::(102, colon, :)
323::(102, [, [)
324::(102, data-type, int)
325::(102, ], ])
326::(102, semi-colon, ;)
327::(103, }, })
328::(104, }, })
329::(105, identifier, catch)
330::(105, (, ()
331::(105, identifier, e)
332::(105, ), ))
333::(105, {, {)
334::(107, }, })
335::(109, }, })
336::(111, class, class)
337::(111, identifier, P)
338::(111, keyword, extends)
339::(111, identifier, Yes)
340::(111, {, {)
341::(112, mutable-constant, var)
342::(112, identifier, farooq)
343::(112, comma, ,)
344::(112, identifier, noor)
345::(112, comma, ,)
346::(112, identifier, abbas)
347::(112, colon, :)
348::(112, data-type, int)
349::(114, access-modifier, public)
350::(114, static, static)
351::(114, func, func)
352::(114, identifier, Q)
353::(114, (, ()
354::(114, identifier, x)
355::(114, colon, :)
356::(114, data-type, int)
357::(114, ), ))
358::(114, {, {)
359::(115, mutable-constant, var)
360::(115, identifier, i)
361::(115, colon, :)
362::(115, data-type, int)
363::(115, UnaryOperator, =)
364::(115, int, 10)
365::(116, while, while)
366::(116, (, ()
367::(116, identifier, i)
368::(116, RelationalOperator, ==)
369::(116, identifier, a)
370::(116, ), ))
371::(116, {, {)
372::(117, }, })
373::(118, }, })
374::(120, func, func)
375::(120, identifier, K)
376::(120, (, ()
377::(120, identifier, a)
378::(120, colon, :)
379::(120, data-type, int)
380::(120, ), ))
381::(120, {, {)
382::(122, }, })
383::(124, init, init)
384::(124, (, ()
385::(124, identifier, x)
386::(124, colon, :)
387::(124, data-type, int)
388::(124, ), ))
389::(124, {, {)
390::(126, }, })
391::(128, deinit, deinit)
392::(128, {, {)
393::(130, }, })
394::(131, }, })
395::(135, end-mark, $)
