1::(1, access-modifier, public)
2::(1, static, static)
3::(1, class, class)
4::(1, identifier, Yes)
5::(1, {, {)
6::(3, }, })
7::(4, interface, protocol)
8::(4, identifier, J)
9::(4, {, {)
10::(6, }, })
11::(7, interface, protocol)
12::(7, identifier, K)
13::(7, {, {)
14::(9, }, })
15::(11, access-modifier, public)
16::(11, static, static)
17::(11, class, class)
18::(11, identifier, X)
19::(11, keyword, extends)
20::(11, identifier, Yes)
21::(11, keyword, implements)
22::(11, identifier, J)
23::(11, comma, ,)
24::(11, identifier, K)
25::(11, {, {)
26::(12, mutable-constant, var)
27::(12, identifier, farooq)
28::(12, comma, ,)
29::(12, identifier, noor)
30::(12, comma, ,)
31::(12, identifier, abbas)
32::(12, colon, :)
33::(12, data-type, int)
34::(14, access-modifier, public)
35::(14, static, static)
36::(14, func, func)
37::(14, identifier, Q)
38::(14, (, ()
39::(14, identifier, x)
40::(14, colon, :)
41::(14, data-type, int)
42::(14, ), ))
43::(14, {, {)
44::(15, mutable-constant, var)
45::(15, identifier, i)
46::(15, colon, :)
47::(15, data-type, int)
48::(15, UnaryOperator, =)
49::(15, integer, 10)
50::(16, while, while)
51::(16, (, ()
52::(16, identifier, i)
53::(16, RelationalOperator, ==)
54::(16, identifier, a)
55::(16, ), ))
56::(16, {, {)
57::(17, }, })
58::(19, }, })
59::(21, init, init)
60::(21, (, ()
61::(21, identifier, x)
62::(21, colon, :)
63::(21, data-type, int)
64::(21, ), ))
65::(21, {, {)
66::(23, }, })
67::(25, deinit, deinit)
68::(25, {, {)
69::(27, }, })
70::(28, }, })
71::(30, struct, struct)
72::(30, identifier, W)
73::(30, keyword, extends)
74::(30, identifier, Yes)
75::(30, keyword, implements)
76::(30, identifier, J)
77::(30, comma, ,)
78::(30, identifier, K)
79::(30, {, {)
80::(31, mutable-constant, var)
81::(31, identifier, farooq)
82::(31, comma, ,)
83::(31, identifier, noor)
84::(31, comma, ,)
85::(31, identifier, abbas)
86::(31, colon, :)
87::(31, data-type, int)
88::(33, access-modifier, public)
89::(33, static, static)
90::(33, func, func)
91::(33, identifier, Q)
92::(33, (, ()
93::(33, identifier, x)
94::(33, colon, :)
95::(33, data-type, int)
96::(33, ), ))
97::(33, {, {)
98::(34, mutable-constant, var)
99::(34, identifier, i)
100::(34, colon, :)
101::(34, data-type, int)
102::(34, UnaryOperator, =)
103::(34, integer, 10)
104::(35, }, })
105::(36, init, init)
106::(36, (, ()
107::(36, identifier, x)
108::(36, colon, :)
109::(36, data-type, int)
110::(36, ), ))
111::(36, {, {)
112::(38, }, })
113::(40, deinit, deinit)
114::(40, {, {)
115::(42, }, })
116::(43, }, })
117::(45, enum, enum)
118::(45, identifier, A)
119::(45, colon, :)
120::(45, data-type, int)
121::(45, {, {)
122::(46, keyword, case)
123::(46, identifier, X)
124::(47, keyword, case)
125::(47, identifier, Y)
126::(48, }, })
127::(50, interface, protocol)
128::(50, identifier, A)
129::(50, keyword, implements)
130::(50, identifier, X)
131::(50, comma, ,)
132::(50, identifier, Y)
133::(50, comma, ,)
134::(50, identifier, Z)
135::(50, {, {)
136::(52, }, })
137::(54, func, func)
138::(54, identifier, work1)
139::(54, (, ()
140::(54, ), ))
141::(54, {, {)
142::(55, mutable-constant, var)
143::(55, identifier, i)
144::(55, colon, :)
145::(55, data-type, int)
146::(55, UnaryOperator, =)
147::(55, identifier, a)
148::(56, mutable-constant, var)
149::(56, identifier, i)
150::(56, colon, :)
151::(56, data-type, int)
152::(56, UnaryOperator, =)
153::(56, string, "str")
154::(57, mutable-constant, var)
155::(57, identifier, i)
156::(57, colon, :)
157::(57, data-type, int)
158::(57, UnaryOperator, =)
159::(58, }, })
160::(60, func, func)
161::(60, identifier, work)
162::(60, (, ()
163::(60, identifier, x)
164::(60, colon, :)
165::(60, data-type, int)
166::(60, ), ))
167::(60, {, {)
168::(61, mutable-constant, var)
169::(61, identifier, i)
170::(61, colon, :)
171::(61, data-type, int)
172::(61, UnaryOperator, =)
173::(61, identifier, a)
174::(62, mutable-constant, var)
175::(62, identifier, i)
176::(62, colon, :)
177::(62, data-type, int)
178::(62, UnaryOperator, =)
179::(62, string, "str")
180::(63, mutable-constant, var)
181::(63, identifier, i)
182::(63, colon, :)
183::(63, data-type, int)
184::(63, UnaryOperator, =)
185::(64, }, })
186::(66, Main, Main)
187::(66, (, ()
188::(66, ), ))
189::(66, {, {)
190::(67, mutable-constant, var)
191::(67, identifier, a)
192::(67, colon, :)
193::(67, data-type, int)
194::(67, UnaryOperator, =)
195::(67, integer, 10)
196::(68, immutable-constant, let)
197::(68, identifier, arr)
198::(68, colon, :)
199::(68, [, [)
200::(68, data-type, int)
201::(68, ], ])
202::(68, semi-colon, ;)
203::(69, immutable-constant, let)
204::(69, identifier, arr)
205::(69, colon, :)
206::(69, [, [)
207::(69, [, [)
208::(69, data-type, int)
209::(69, ], ])
210::(69, ], ])
211::(69, semi-colon, ;)
212::(70, while, while)
213::(70, (, ()
214::(70, identifier, b)
215::(70, dot, .)
216::(70, identifier, a)
217::(70, dot, .)
218::(70, identifier, fn)
219::(70, (, ()
220::(70, identifier, a)
221::(70, colon, :)
222::(70, data-type, int)
223::(70, ), ))
224::(70, RelationalOperator, ==)
225::(70, integer, 10)
226::(70, ), ))
227::(70, {, {)
228::(72, if, if)
229::(72, (, ()
230::(72, identifier, b)
231::(72, RelationalOperator, <)
232::(72, integer, 5)
233::(72, ), ))
234::(72, {, {)
235::(73, immutable-constant, let)
236::(73, identifier, arr)
237::(73, colon, :)
238::(73, [, [)
239::(73, data-type, int)
240::(73, ], ])
241::(73, semi-colon, ;)
242::(74, }, })
243::(75, else, else)
244::(75, if, if)
245::(75, (, ()
246::(75, identifier, a)
247::(75, RelationalOperator, >)
248::(75, integer, 4)
249::(75, ), ))
250::(75, {, {)
251::(76, identifier, this)
252::(76, dot, .)
253::(76, identifier, a)
254::(76, inc-dec, ++)
255::(76, inc-dec, ++)
256::(77, immutable-constant, let)
257::(77, identifier, arr)
258::(77, colon, :)
259::(77, data-type, int)
260::(77, UnaryOperator, =)
261::(77, identifier, work)
262::(77, (, ()
263::(77, identifier, x)
264::(77, colon, :)
265::(77, data-type, int)
266::(77, comma, ,)
267::(77, integer, 5)
268::(77, colon, :)
269::(77, data-type, int)
270::(77, ), ))
271::(77, semi-colon, ;)
272::(78, }, })
273::(79, continue, continue)
274::(79, semi-colon, ;)
275::(80, }, })
276::(81, if, if)
277::(81, (, ()
278::(81, identifier, b)
279::(81, RelationalOperator, <)
280::(81, integer, 5)
281::(81, ), ))
282::(81, {, {)
283::(82, while, while)
284::(82, (, ()
285::(82, identifier, b)
286::(82, RelationalOperator, ==)
287::(82, integer, 10)
288::(82, ), ))
289::(82, {, {)
290::(83, if, if)
291::(83, (, ()
292::(83, identifier, b)
293::(83, RelationalOperator, <)
294::(83, integer, 5)
295::(83, ), ))
296::(83, {, {)
297::(84, immutable-constant, let)
298::(84, identifier, arr)
299::(84, colon, :)
300::(84, [, [)
301::(84, data-type, int)
302::(84, ], ])
303::(84, semi-colon, ;)
304::(85, }, })
305::(86, else, else)
306::(86, if, if)
307::(86, (, ()
308::(86, identifier, a)
309::(86, RelationalOperator, >)
310::(86, integer, 4)
311::(86, ), ))
312::(86, {, {)
313::(88, }, })
314::(89, continue, continue)
315::(89, semi-colon, ;)
316::(90, }, })
317::(91, }, })
318::(92, else, else)
319::(92, if, if)
320::(92, (, ()
321::(92, identifier, a)
322::(92, RelationalOperator, >)
323::(92, integer, 4)
324::(92, ), ))
325::(92, {, {)
326::(94, }, })
327::(95, else, else)
328::(95, {, {)
329::(97, }, })
330::(99, identifier, try)
331::(99, {, {)
332::(100, if, if)
333::(100, (, ()
334::(100, identifier, b)
335::(100, RelationalOperator, <)
336::(100, integer, 5)
337::(100, ), ))
338::(100, {, {)
339::(101, immutable-constant, let)
340::(101, identifier, arr)
341::(101, colon, :)
342::(101, [, [)
343::(101, data-type, int)
344::(101, ], ])
345::(101, semi-colon, ;)
346::(102, }, })
347::(103, }, })
348::(104, identifier, catch)
349::(104, (, ()
350::(104, identifier, e)
351::(104, ), ))
352::(104, {, {)
353::(106, }, })
354::(108, }, })
355::(110, class, class)
356::(110, identifier, X)
357::(110, keyword, extends)
358::(110, identifier, Yes)
359::(110, keyword, implements)
360::(110, identifier, X)
361::(110, comma, ,)
362::(110, identifier, Farooq)
363::(110, {, {)
364::(111, mutable-constant, var)
365::(111, identifier, farooq)
366::(111, comma, ,)
367::(111, identifier, noor)
368::(111, comma, ,)
369::(111, identifier, abbas)
370::(111, colon, :)
371::(111, data-type, int)
372::(113, access-modifier, public)
373::(113, static, static)
374::(113, func, func)
375::(113, identifier, Q)
376::(113, (, ()
377::(113, identifier, x)
378::(113, colon, :)
379::(113, data-type, int)
380::(113, ), ))
381::(113, {, {)
382::(114, mutable-constant, var)
383::(114, identifier, i)
384::(114, colon, :)
385::(114, data-type, int)
386::(114, UnaryOperator, =)
387::(114, integer, 10)
388::(115, while, while)
389::(115, (, ()
390::(115, identifier, i)
391::(115, RelationalOperator, ==)
392::(115, identifier, a)
393::(115, ), ))
394::(115, {, {)
395::(116, }, })
396::(118, }, })
397::(120, init, init)
398::(120, (, ()
399::(120, identifier, x)
400::(120, colon, :)
401::(120, data-type, int)
402::(120, ), ))
403::(120, {, {)
404::(122, }, })
405::(124, deinit, deinit)
406::(124, {, {)
407::(126, }, })
408::(127, }, })
409::(131, end-mark, $)
