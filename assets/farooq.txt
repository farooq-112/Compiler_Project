1::(1, access-modifier, public)
2::(1, static, static)
3::(1, class, class)
4::(1, identifier, Yes)
5::(1, {, {)
6::(3, init, init)
7::(3, (, ()
8::(3, identifier, f)
9::(3, colon, :)
10::(3, data-type, int)
11::(3, comma, ,)
12::(3, identifier, d)
13::(3, colon, :)
14::(3, data-type, float)
15::(3, ), ))
16::(3, {, {)
17::(5, }, })
18::(6, access-modifier, public)
19::(6, static, static)
20::(6, func, func)
21::(6, identifier, Q)
22::(6, (, ()
23::(6, identifier, x)
24::(6, colon, :)
25::(6, data-type, int)
26::(6, comma, ,)
27::(6, identifier, y)
28::(6, colon, :)
29::(6, data-type, float)
30::(6, ), ))
31::(6, ret-type, ->)
32::(6, data-type, float)
33::(6, {, {)
34::(7, mutable-constant, var)
35::(7, identifier, i)
36::(7, colon, :)
37::(7, data-type, int)
38::(7, UnaryOperator, =)
39::(7, integer, 10)
40::(8, while, while)
41::(8, (, ()
42::(8, identifier, i)
43::(8, RelationalOperator, ==)
44::(8, identifier, a)
45::(8, ), ))
46::(8, {, {)
47::(9, }, })
48::(11, }, })
49::(12, }, })
50::(13, interface, protocol)
51::(13, identifier, J)
52::(13, {, {)
53::(15, }, })
54::(16, interface, protocol)
55::(16, identifier, K)
56::(16, {, {)
57::(18, }, })
58::(20, access-modifier, public)
59::(20, static, static)
60::(20, class, class)
61::(20, identifier, X)
62::(20, keyword, extends)
63::(20, identifier, Yes)
64::(20, keyword, implements)
65::(20, identifier, J)
66::(20, comma, ,)
67::(20, identifier, K)
68::(20, {, {)
69::(21, mutable-constant, var)
70::(21, identifier, farooq)
71::(21, comma, ,)
72::(21, identifier, noor)
73::(21, comma, ,)
74::(21, identifier, abbas)
75::(21, colon, :)
76::(21, data-type, int)
77::(23, access-modifier, public)
78::(23, static, static)
79::(23, func, func)
80::(23, identifier, Q)
81::(23, (, ()
82::(23, identifier, x)
83::(23, colon, :)
84::(23, data-type, int)
85::(23, comma, ,)
86::(23, identifier, y)
87::(23, colon, :)
88::(23, data-type, float)
89::(23, ), ))
90::(23, ret-type, ->)
91::(23, data-type, float)
92::(23, {, {)
93::(24, mutable-constant, var)
94::(24, identifier, i)
95::(24, colon, :)
96::(24, data-type, int)
97::(24, UnaryOperator, =)
98::(24, integer, 10)
99::(25, while, while)
100::(25, (, ()
101::(25, identifier, i)
102::(25, RelationalOperator, ==)
103::(25, identifier, a)
104::(25, ), ))
105::(25, {, {)
106::(26, }, })
107::(28, }, })
108::(30, init, init)
109::(30, (, ()
110::(30, identifier, x)
111::(30, colon, :)
112::(30, data-type, int)
113::(30, ), ))
114::(30, {, {)
115::(32, }, })
116::(34, deinit, deinit)
117::(34, {, {)
118::(36, }, })
119::(37, }, })
120::(39, struct, struct)
121::(39, identifier, W)
122::(39, keyword, extends)
123::(39, identifier, Yes)
124::(39, keyword, implements)
125::(39, identifier, J)
126::(39, comma, ,)
127::(39, identifier, K)
128::(39, {, {)
129::(40, mutable-constant, var)
130::(40, identifier, farooq)
131::(40, comma, ,)
132::(40, identifier, noor)
133::(40, comma, ,)
134::(40, identifier, abbas)
135::(40, colon, :)
136::(40, data-type, int)
137::(42, access-modifier, public)
138::(42, static, static)
139::(42, func, func)
140::(42, identifier, Q)
141::(42, (, ()
142::(42, identifier, x)
143::(42, colon, :)
144::(42, data-type, int)
145::(42, ), ))
146::(42, {, {)
147::(43, mutable-constant, var)
148::(43, identifier, i)
149::(43, colon, :)
150::(43, data-type, int)
151::(43, UnaryOperator, =)
152::(43, integer, 10)
153::(44, }, })
154::(45, init, init)
155::(45, (, ()
156::(45, identifier, x)
157::(45, colon, :)
158::(45, data-type, int)
159::(45, ), ))
160::(45, {, {)
161::(47, }, })
162::(49, deinit, deinit)
163::(49, {, {)
164::(51, }, })
165::(52, }, })
166::(54, enum, enum)
167::(54, identifier, A)
168::(54, colon, :)
169::(54, data-type, int)
170::(54, {, {)
171::(55, keyword, case)
172::(55, identifier, X)
173::(56, keyword, case)
174::(56, identifier, Y)
175::(57, }, })
176::(59, interface, protocol)
177::(59, identifier, A)
178::(59, keyword, implements)
179::(59, identifier, X)
180::(59, comma, ,)
181::(59, identifier, Y)
182::(59, comma, ,)
183::(59, identifier, Z)
184::(59, {, {)
185::(61, }, })
186::(63, func, func)
187::(63, identifier, work1)
188::(63, (, ()
189::(63, ), ))
190::(63, {, {)
191::(64, mutable-constant, var)
192::(64, identifier, i)
193::(64, colon, :)
194::(64, data-type, int)
195::(64, UnaryOperator, =)
196::(64, identifier, a)
197::(65, mutable-constant, var)
198::(65, identifier, i)
199::(65, colon, :)
200::(65, data-type, int)
201::(65, UnaryOperator, =)
202::(65, string, "str")
203::(66, mutable-constant, var)
204::(66, identifier, i)
205::(66, colon, :)
206::(66, data-type, int)
207::(66, UnaryOperator, =)
208::(67, }, })
209::(69, func, func)
210::(69, identifier, work)
211::(69, (, ()
212::(69, identifier, x)
213::(69, colon, :)
214::(69, data-type, int)
215::(69, ), ))
216::(69, {, {)
217::(70, mutable-constant, var)
218::(70, identifier, i)
219::(70, colon, :)
220::(70, data-type, int)
221::(70, UnaryOperator, =)
222::(70, identifier, a)
223::(71, mutable-constant, var)
224::(71, identifier, i)
225::(71, colon, :)
226::(71, data-type, int)
227::(71, UnaryOperator, =)
228::(71, string, "str")
229::(72, mutable-constant, var)
230::(72, identifier, i)
231::(72, colon, :)
232::(72, data-type, int)
233::(72, UnaryOperator, =)
234::(73, }, })
235::(75, Main, Main)
236::(75, (, ()
237::(75, ), ))
238::(75, {, {)
239::(76, mutable-constant, var)
240::(76, identifier, a)
241::(76, colon, :)
242::(76, data-type, int)
243::(76, UnaryOperator, =)
244::(76, integer, 4)
245::(77, immutable-constant, let)
246::(77, identifier, arr)
247::(77, colon, :)
248::(77, [, [)
249::(77, data-type, int)
250::(77, ], ])
251::(77, semi-colon, ;)
252::(78, immutable-constant, let)
253::(78, identifier, arr)
254::(78, colon, :)
255::(78, [, [)
256::(78, [, [)
257::(78, data-type, int)
258::(78, ], ])
259::(78, ], ])
260::(78, semi-colon, ;)
261::(79, while, while)
262::(79, (, ()
263::(79, identifier, b)
264::(79, dot, .)
265::(79, identifier, a)
266::(79, dot, .)
267::(79, identifier, fn)
268::(79, (, ()
269::(79, identifier, a)
270::(79, ), ))
271::(79, RelationalOperator, ==)
272::(79, integer, 10)
273::(79, ), ))
274::(79, {, {)
275::(81, if, if)
276::(81, (, ()
277::(81, identifier, b)
278::(81, RelationalOperator, <)
279::(81, integer, 5)
280::(81, ), ))
281::(81, {, {)
282::(82, immutable-constant, let)
283::(82, identifier, arr)
284::(82, colon, :)
285::(82, [, [)
286::(82, data-type, int)
287::(82, ], ])
288::(82, semi-colon, ;)
289::(83, }, })
290::(84, else, else)
291::(84, if, if)
292::(84, (, ()
293::(84, identifier, a)
294::(84, RelationalOperator, >)
295::(84, integer, 4)
296::(84, ), ))
297::(84, {, {)
298::(85, identifier, this)
299::(85, dot, .)
300::(85, identifier, a)
301::(85, inc-dec, ++)
302::(85, inc-dec, ++)
303::(86, immutable-constant, let)
304::(86, identifier, arr)
305::(86, colon, :)
306::(86, data-type, int)
307::(86, UnaryOperator, =)
308::(86, identifier, work)
309::(86, (, ()
310::(86, identifier, x)
311::(86, colon, :)
312::(86, data-type, int)
313::(86, comma, ,)
314::(86, integer, 5)
315::(86, colon, :)
316::(86, data-type, int)
317::(86, ), ))
318::(86, semi-colon, ;)
319::(87, }, })
320::(88, continue, continue)
321::(88, semi-colon, ;)
322::(89, }, })
323::(90, if, if)
324::(90, (, ()
325::(90, identifier, b)
326::(90, RelationalOperator, <)
327::(90, integer, 5)
328::(90, ), ))
329::(90, {, {)
330::(91, while, while)
331::(91, (, ()
332::(91, identifier, b)
333::(91, RelationalOperator, ==)
334::(91, integer, 10)
335::(91, ), ))
336::(91, {, {)
337::(92, if, if)
338::(92, (, ()
339::(92, identifier, b)
340::(92, RelationalOperator, <)
341::(92, integer, 5)
342::(92, ), ))
343::(92, {, {)
344::(93, immutable-constant, let)
345::(93, identifier, arr)
346::(93, colon, :)
347::(93, [, [)
348::(93, data-type, int)
349::(93, ], ])
350::(93, semi-colon, ;)
351::(94, }, })
352::(95, else, else)
353::(95, if, if)
354::(95, (, ()
355::(95, identifier, a)
356::(95, RelationalOperator, >)
357::(95, integer, 4)
358::(95, ), ))
359::(95, {, {)
360::(97, }, })
361::(98, continue, continue)
362::(98, semi-colon, ;)
363::(99, }, })
364::(100, }, })
365::(101, else, else)
366::(101, if, if)
367::(101, (, ()
368::(101, identifier, a)
369::(101, RelationalOperator, >)
370::(101, integer, 4)
371::(101, ), ))
372::(101, {, {)
373::(103, }, })
374::(104, else, else)
375::(104, {, {)
376::(106, }, })
377::(108, identifier, try)
378::(108, {, {)
379::(109, if, if)
380::(109, (, ()
381::(109, identifier, b)
382::(109, RelationalOperator, <)
383::(109, integer, 5)
384::(109, ), ))
385::(109, {, {)
386::(110, immutable-constant, let)
387::(110, identifier, arr)
388::(110, colon, :)
389::(110, [, [)
390::(110, data-type, int)
391::(110, ], ])
392::(110, semi-colon, ;)
393::(111, }, })
394::(112, }, })
395::(113, identifier, catch)
396::(113, (, ()
397::(113, identifier, e)
398::(113, ), ))
399::(113, {, {)
400::(115, }, })
401::(117, }, })
402::(119, class, class)
403::(119, identifier, X)
404::(119, keyword, extends)
405::(119, identifier, Yes)
406::(119, keyword, implements)
407::(119, identifier, X)
408::(119, comma, ,)
409::(119, identifier, Farooq)
410::(119, {, {)
411::(120, mutable-constant, var)
412::(120, identifier, farooq)
413::(120, comma, ,)
414::(120, identifier, noor)
415::(120, comma, ,)
416::(120, identifier, abbas)
417::(120, colon, :)
418::(120, data-type, int)
419::(122, access-modifier, public)
420::(122, static, static)
421::(122, func, func)
422::(122, identifier, Q)
423::(122, (, ()
424::(122, identifier, x)
425::(122, colon, :)
426::(122, data-type, int)
427::(122, ), ))
428::(122, {, {)
429::(123, mutable-constant, var)
430::(123, identifier, i)
431::(123, colon, :)
432::(123, data-type, int)
433::(123, UnaryOperator, =)
434::(123, integer, 10)
435::(124, while, while)
436::(124, (, ()
437::(124, identifier, i)
438::(124, RelationalOperator, ==)
439::(124, identifier, a)
440::(124, ), ))
441::(124, {, {)
442::(125, }, })
443::(128, func, func)
444::(128, identifier, fn)
445::(128, (, ()
446::(128, identifier, a)
447::(128, colon, :)
448::(128, data-type, int)
449::(128, ), ))
450::(128, {, {)
451::(130, }, })
452::(131, }, })
453::(133, init, init)
454::(133, (, ()
455::(133, identifier, x)
456::(133, colon, :)
457::(133, data-type, int)
458::(133, ), ))
459::(133, {, {)
460::(135, }, })
461::(137, deinit, deinit)
462::(137, {, {)
463::(139, }, })
464::(140, }, })
465::(144, end-mark, $)
