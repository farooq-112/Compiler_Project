1::(1, class, class)
2::(1, identifier, X)
3::(1, keyword, extends)
4::(1, identifier, Yes)
5::(1, keyword, implements)
6::(1, identifier, X)
7::(1, comma, ,)
8::(1, identifier, Farooq)
9::(1, {, {)
10::(2, mutable-constant, var)
11::(2, identifier, farooq)
12::(2, comma, ,)
13::(2, identifier, noor)
14::(2, comma, ,)
15::(2, identifier, abbas)
16::(2, colon, :)
17::(2, data-type, int)
18::(4, access-modifier, public)
19::(4, static, static)
20::(4, func, func)
21::(4, identifier, Q)
22::(4, (, ()
23::(4, identifier, x)
24::(4, colon, :)
25::(4, data-type, int)
26::(4, ), ))
27::(4, {, {)
28::(5, mutable-constant, var)
29::(5, identifier, i)
30::(5, colon, :)
31::(5, data-type, int)
32::(5, UnaryOperator, =)
33::(5, integer, 10)
34::(6, while, while)
35::(6, (, ()
36::(6, identifier, i)
37::(6, RelationalOperator, ==)
38::(6, identifier, a)
39::(6, ), ))
40::(6, {, {)
41::(7, }, })
42::(9, }, })
43::(11, init, init)
44::(11, (, ()
45::(11, identifier, x)
46::(11, colon, :)
47::(11, data-type, int)
48::(11, ), ))
49::(11, {, {)
50::(13, }, })
51::(15, deinit, deinit)
52::(15, {, {)
53::(17, }, })
54::(18, }, })
55::(20, struct, struct)
56::(20, identifier, X)
57::(20, keyword, extends)
58::(20, identifier, Yes)
59::(20, keyword, implements)
60::(20, identifier, X)
61::(20, comma, ,)
62::(20, identifier, Farooq)
63::(20, {, {)
64::(21, mutable-constant, var)
65::(21, identifier, farooq)
66::(21, comma, ,)
67::(21, identifier, noor)
68::(21, comma, ,)
69::(21, identifier, abbas)
70::(21, colon, :)
71::(21, data-type, int)
72::(23, access-modifier, public)
73::(23, static, static)
74::(23, func, func)
75::(23, identifier, Q)
76::(23, (, ()
77::(23, identifier, x)
78::(23, colon, :)
79::(23, data-type, int)
80::(23, ), ))
81::(23, {, {)
82::(24, mutable-constant, var)
83::(24, identifier, i)
84::(24, colon, :)
85::(24, data-type, int)
86::(24, UnaryOperator, =)
87::(24, integer, 10)
88::(25, }, })
89::(26, init, init)
90::(26, (, ()
91::(26, identifier, x)
92::(26, colon, :)
93::(26, data-type, int)
94::(26, ), ))
95::(26, {, {)
96::(28, }, })
97::(30, deinit, deinit)
98::(30, {, {)
99::(32, }, })
100::(33, }, })
101::(35, enum, enum)
102::(35, identifier, A)
103::(35, colon, :)
104::(35, data-type, int)
105::(35, {, {)
106::(36, keyword, case)
107::(36, identifier, X)
108::(37, keyword, case)
109::(37, identifier, Y)
110::(38, }, })
111::(40, interface, protocol)
112::(40, identifier, A)
113::(40, keyword, implements)
114::(40, identifier, X)
115::(40, comma, ,)
116::(40, identifier, Y)
117::(40, comma, ,)
118::(40, identifier, Z)
119::(40, {, {)
120::(42, }, })
121::(44, func, func)
122::(44, identifier, work1)
123::(44, (, ()
124::(44, ), ))
125::(44, {, {)
126::(45, mutable-constant, var)
127::(45, identifier, i)
128::(45, colon, :)
129::(45, data-type, int)
130::(45, UnaryOperator, =)
131::(45, identifier, a)
132::(46, mutable-constant, var)
133::(46, identifier, i)
134::(46, colon, :)
135::(46, data-type, int)
136::(46, UnaryOperator, =)
137::(46, string, "str")
138::(47, mutable-constant, var)
139::(47, identifier, i)
140::(47, colon, :)
141::(47, data-type, int)
142::(47, UnaryOperator, =)
143::(48, }, })
144::(50, func, func)
145::(50, identifier, work)
146::(50, (, ()
147::(50, identifier, x)
148::(50, colon, :)
149::(50, data-type, int)
150::(50, ), ))
151::(50, {, {)
152::(51, mutable-constant, var)
153::(51, identifier, i)
154::(51, colon, :)
155::(51, data-type, int)
156::(51, UnaryOperator, =)
157::(51, identifier, a)
158::(52, mutable-constant, var)
159::(52, identifier, i)
160::(52, colon, :)
161::(52, data-type, int)
162::(52, UnaryOperator, =)
163::(52, string, "str")
164::(53, mutable-constant, var)
165::(53, identifier, i)
166::(53, colon, :)
167::(53, data-type, int)
168::(53, UnaryOperator, =)
169::(54, }, })
170::(55, identifier, work1)
171::(55, (, ()
172::(55, ), ))
173::(55, semi-colon, ;)
174::(56, identifier, work)
175::(56, (, ()
176::(56, identifier, x)
177::(56, colon, :)
178::(56, data-type, int)
179::(56, ), ))
180::(56, semi-colon, ;)
181::(57, Main, Main)
182::(57, (, ()
183::(57, ), ))
184::(57, {, {)
185::(58, mutable-constant, var)
186::(58, identifier, a)
187::(58, colon, :)
188::(58, data-type, int)
189::(58, UnaryOperator, =)
190::(58, integer, 10)
191::(59, immutable-constant, let)
192::(59, identifier, arr)
193::(59, colon, :)
194::(59, [, [)
195::(59, data-type, int)
196::(59, ], ])
197::(59, semi-colon, ;)
198::(60, immutable-constant, let)
199::(60, identifier, arr)
200::(60, colon, :)
201::(60, [, [)
202::(60, [, [)
203::(60, data-type, int)
204::(60, ], ])
205::(60, ], ])
206::(60, semi-colon, ;)
207::(61, while, while)
208::(61, (, ()
209::(61, identifier, b)
210::(61, RelationalOperator, ==)
211::(61, integer, 10)
212::(61, ), ))
213::(61, {, {)
214::(62, if, if)
215::(62, (, ()
216::(62, identifier, b)
217::(62, RelationalOperator, <)
218::(62, integer, 5)
219::(62, ), ))
220::(62, {, {)
221::(63, immutable-constant, let)
222::(63, identifier, arr)
223::(63, colon, :)
224::(63, [, [)
225::(63, data-type, int)
226::(63, ], ])
227::(63, semi-colon, ;)
228::(64, }, })
229::(65, else, else)
230::(65, if, if)
231::(65, (, ()
232::(65, identifier, a)
233::(65, RelationalOperator, >)
234::(65, integer, 4)
235::(65, ), ))
236::(65, {, {)
237::(66, identifier, work)
238::(66, (, ()
239::(66, ), ))
240::(66, semi-colon, ;)
241::(68, immutable-constant, let)
242::(68, identifier, arr)
243::(68, colon, :)
244::(68, data-type, int)
245::(68, UnaryOperator, =)
246::(68, identifier, work)
247::(68, (, ()
248::(68, identifier, x)
249::(68, colon, :)
250::(68, data-type, int)
251::(68, comma, ,)
252::(68, integer, 5)
253::(68, colon, :)
254::(68, data-type, int)
255::(68, ), ))
256::(68, semi-colon, ;)
257::(69, }, })
258::(70, continue, continue)
259::(70, semi-colon, ;)
260::(71, }, })
261::(72, if, if)
262::(72, (, ()
263::(72, identifier, b)
264::(72, RelationalOperator, <)
265::(72, integer, 5)
266::(72, ), ))
267::(72, {, {)
268::(73, while, while)
269::(73, (, ()
270::(73, identifier, b)
271::(73, RelationalOperator, ==)
272::(73, integer, 10)
273::(73, ), ))
274::(73, {, {)
275::(74, if, if)
276::(74, (, ()
277::(74, identifier, b)
278::(74, RelationalOperator, <)
279::(74, integer, 5)
280::(74, ), ))
281::(74, {, {)
282::(75, immutable-constant, let)
283::(75, identifier, arr)
284::(75, colon, :)
285::(75, [, [)
286::(75, data-type, int)
287::(75, ], ])
288::(75, semi-colon, ;)
289::(76, }, })
290::(77, else, else)
291::(77, if, if)
292::(77, (, ()
293::(77, identifier, a)
294::(77, RelationalOperator, >)
295::(77, integer, 4)
296::(77, ), ))
297::(77, {, {)
298::(79, }, })
299::(80, continue, continue)
300::(80, semi-colon, ;)
301::(81, }, })
302::(82, }, })
303::(83, else, else)
304::(83, if, if)
305::(83, (, ()
306::(83, identifier, a)
307::(83, RelationalOperator, >)
308::(83, integer, 4)
309::(83, ), ))
310::(83, {, {)
311::(85, }, })
312::(86, else, else)
313::(86, {, {)
314::(88, }, })
315::(90, identifier, try)
316::(90, {, {)
317::(91, if, if)
318::(91, (, ()
319::(91, identifier, b)
320::(91, RelationalOperator, <)
321::(91, integer, 5)
322::(91, ), ))
323::(91, {, {)
324::(92, immutable-constant, let)
325::(92, identifier, arr)
326::(92, colon, :)
327::(92, [, [)
328::(92, data-type, int)
329::(92, ], ])
330::(92, semi-colon, ;)
331::(93, }, })
332::(94, }, })
333::(95, identifier, catch)
334::(95, (, ()
335::(95, identifier, e)
336::(95, ), ))
337::(95, {, {)
338::(97, }, })
339::(99, }, })
340::(100, }, })
341::(101, class, class)
342::(101, identifier, X)
343::(101, keyword, extends)
344::(101, identifier, Yes)
345::(101, keyword, implements)
346::(101, identifier, X)
347::(101, comma, ,)
348::(101, identifier, Farooq)
349::(101, {, {)
350::(102, mutable-constant, var)
351::(102, identifier, farooq)
352::(102, comma, ,)
353::(102, identifier, noor)
354::(102, comma, ,)
355::(102, identifier, abbas)
356::(102, colon, :)
357::(102, data-type, int)
358::(104, access-modifier, public)
359::(104, static, static)
360::(104, func, func)
361::(104, identifier, Q)
362::(104, (, ()
363::(104, identifier, x)
364::(104, colon, :)
365::(104, data-type, int)
366::(104, ), ))
367::(104, {, {)
368::(105, mutable-constant, var)
369::(105, identifier, i)
370::(105, colon, :)
371::(105, data-type, int)
372::(105, UnaryOperator, =)
373::(105, integer, 10)
374::(106, while, while)
375::(106, (, ()
376::(106, identifier, i)
377::(106, RelationalOperator, ==)
378::(106, identifier, a)
379::(106, ), ))
380::(106, {, {)
381::(107, }, })
382::(109, }, })
383::(111, init, init)
384::(111, (, ()
385::(111, identifier, x)
386::(111, colon, :)
387::(111, data-type, int)
388::(111, ), ))
389::(111, {, {)
390::(113, }, })
391::(115, deinit, deinit)
392::(115, {, {)
393::(117, }, })
394::(118, }, })
395::(122, end-mark, $)
