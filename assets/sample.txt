protocol J{

}
protocol K{

}

class Yes {

}

public static class X extends Yes implements J , K {
    var farooq , noor ,abbas : int

    public static func Q (x : int, y : float) -> float{
        var i :int = 10;
         while(i == a){
        }
    
    }

    init(x : int){
        
    }

    deinit{

    }
} 

struct W extends Yes implements J , K  {
    var farooq , noor ,abbas : int
    public static func Q (x : int){
        var i :int = 10;
    }
    init(x : int){
        
    }

    deinit{
        
    }
} 

//enum A : int {
//case X
  //  case Y
//}

//protocol A implements X , Y ,Z{
    
//}

func work1(){
    var r:int = 0;
    var t:int;
}

func work(x : int){
    //var i,j,k :int
    var i: int = 0;
    this.id.id
}

Main(){
        var a: int = 4;
        let arr:[int];
        let arr:[[int]];
        try{
            if(b < 5){
                    let arr:[int];
            }
        }
        catch(e){

        }

}



$
