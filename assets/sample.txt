func gst(){
    var a:int =  9 + 6 * 3;
    var y:float = 12.0;
    var x: float = a + y;
    //x = 5;
    while(a ){

    }
}
class Z {

}




public final class Yes extends Z{

}
protocol K{

}

struct W implements K  {
    var farooq , noor ,abbas : int
    var noor : int
    public static func Q (x : int){
        var i :int = 10;
    }
    public static func Q (x : int){
        var i :int = 10;
    }
    init(x : int){
        
    }

    deinit{
        
    }
}     

class A {
    var farooq , noor ,abbas : int = 10
    var r , t ,d : int
    var w , e ,m : float

func mst(){
    var a , n : int = 6;
    var q : int = 6;
    
}
}



protocol J{

}




public static class L extends Yes implements J , K {
    var farooq , noor ,abbas : int

    public static func Q (x : int, y : float) -> float{
        var i :int = 10;
        var a :int = 10;
         while(i == a){
        }
    
    }

    init(x : int){
        
    }

    deinit{

    }
} 

//struct W extends Yes implements J , K  {
//    var farooq , noor ,abbas : int
//    public static func Q (x : int){
//        var i :int = 10;
//    }
//    init(x : int){
//        
//    }
//
//    deinit{
//        
//    }
//} 

//enum A : int {
//case X
  //  case Y
//}

//protocol A implements X , Y ,Z{
    
//}

func work1(){
    var r:int = 0;
    var t:int;
}

func work(x : int){
    //var i,j,k :int
    var i: int = 0;
    this.id.id
}

Main(){
        let arr:[[int]];
        var obj: Yes = Z.init();

        try{
           // var a: int = 4;
           // var b: string = "hgg";
           // var c: string = a + b;
           // if(a + b){
           //         let arr:[int];
           // }
        }
        catch(e){

        }

}

//Main(){
//        let arr:[[int]];
//        var obj: Yes = Yes.init();
//        try{
//            var a: int = 4;
//            if(a != 5){
//                    let arr:[int];
//            }
//        }
//        catch(e){
//
//        }
//
//}

$
