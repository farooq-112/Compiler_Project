class X extends Yes implements X , Farooq {
    var farooq , noor ,abbas : int

    public static func Q (x : int){
        var i :int = 10
         while(i == a){
        }
    
    }

    init(x : int){
        
    }

    deinit{

    }
} 

struct X extends Yes implements X , Farooq {
    var farooq , noor ,abbas : int

    public static func Q (x : int){
        var i :int = 10
    }
    init(x : int){
        
    }

    deinit{
        
    }
} 

enum A : int {
    case X
    case Y
}

protocol A implements X , Y ,Z{
    
}

func work1(){
    var i :int = a
    var i :int = "str"
    var i :int = 9.0
}

func work(x : int){
    var i :int = a
    var i :int = "str"
    var i :int = 9.0
}
work1();
work(x:int);

    Main(){
        var a: int = 10
        let arr:[int];
        let arr:[[int]];
        while(b == 10){
            if(b < 5){
                let arr:[int];
            }
            else if(a > 4){
                work();
               let arr:int = work(x:int);
            }
            continue;
        }
        if(b < 5){
            while(b == 10){
                if(b < 5){
                    let arr:[int];
                }
                else if(a > 4){

                }
                continue;
            }
        }
        else if(a > 4){

        }
        else{
            
        }
        
        try{
            if(b < 5){
                    let arr:[int];
            }
        }
        catch(e){

        }

    }

$